[
["index.html", "进阶 R 图形 Preface", " 进阶 R 图形 Maxine 2020-01-10 Preface A collection of nice geoms, themes, design tricks, ggplot2 extensions etc. 所有内容默认已加载 tidyverse : library(tidyverse) "],
["ridges.html", "1 山峦图 1.1 简介 1.2 ridgeline 1.3 density_ridges() 1.4 映射填充色 (Varying fill colors along the x axis) 1.5 统计变换 1.6 主题 1.7 循环标度 1.8 实例：澳大利亚运动员身高", " 1 山峦图 1.1 简介 参考 Introduction to ggridges 和 Gallery of ggridges examples 山峦图(ridgeline plot, 也叫作山脊线图)同样是一种对数据分布的可视化方法。ggridges 包主要用来绘制山峦图，同时可以很好地反映数据分布在不同时间、不同空间下的对比情况。ggridges 主要提供两个几何图像函数： geom_density_ridges(aes(x, y)): 根据几何变换 density_ridges，绘制变量 x 在分组变量 y 上(如果 y 不是分类变量，要手动指定aes(group = y))的核密度曲线，且填充曲线下方面积(此时曲线的高度是统计变换自行计算的核密度估计) geom_ridgeline(aes(x, y, height))： 绘制变量 x 在分组变量 y 上的面积图，高度由 height 指定(统计变换 stat = \"identity\") 这两个几何对象的关系很像geom_bar() 和 geom_bar(stat = \"identity\") 一些简单的例子： library(ggridges) ## ridgeline data &lt;- data.frame(x = 1:5, y = rep(1, 5), height = c(0, 1, 3, 4, 2)) ggplot(data, aes(x, y, height = height)) + geom_ridgeline() ## y 只有一个水平 ## density_ridgeline ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_density_ridges(aes(fill = Species)) ggridges 还提供了一个专门用于呈现山脊线图的主题设置 theme_ridges: ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_density_ridges(aes(fill = Species)) + theme_ridges() ggridges 包的作者 Claus O. Wilke 还有一本关于数据可视化理论方面的数据，可以在 https://serialmentor.com/dataviz/ 找到 1.2 ridgeline 和 geom_line() 类似，群组对象geom_ridgeline() 默认将所有传递 y 参数的变量作为分组变量(geom_line()将所有传入的离散变量的组合作为分组变量)，如果传入 y 的变量本身不是离散的，那么要手动指定 aes(group = y): ## 以 y 为分组变量的面积图 d &lt;- data.frame(x = rep(1:5, 3), y = c(rep(0, 5), rep(1, 5), rep(3, 5)), height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1)) ggplot(d, aes(x, y, height = height, group = y)) + geom_ridgeline(fill = &quot;lightblue&quot;) 允许 height 中有负数，但同时要在 geom_ridgeline() 中设置 min_height，否则图表在 y 轴的下半部分将不予显示： data &lt;- data.frame(x = 1:5, y = rep(1, 5), height = c(0, 1, -1, 3, 2)) ggplot(data, aes(x, y, height = height)) + geom_ridgeline(aes(group = y)) ggplot(data, aes(x, y, height = height)) + geom_ridgeline(aes(group = y), min_height = -10) 在 geom_density_ridges() 中设置 stat = \"identity\" 并传入 height 参数，效果与 geom_ridgeline() 等同： d &lt;- data.frame(x = rep(1:5, 3), y = c(rep(0, 5), rep(1, 5), rep(3, 5)), height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1)) ggplot(d, aes(x, y, height = height, group = y)) + geom_density_ridges(stat = &quot;identity&quot;, fill = &quot;lightblue&quot;) 1.3 density_ridges() geom_density_ridges() 计算一定分组下 x 的核密度估计，并绘制面积图，它有一个变体 geom_density_ridges2()，这时面积图是封闭的多边形： p &lt;- ggplot(iris, aes(Sepal.Length, Species)) p + geom_density_ridges() + theme_ridges() p + geom_density_ridges2() + theme_ridges() Figure 1.1: geom_density_ridges2() use enclosed polygons geom_density_ridges() 和 geom_ridgelines() 在分组变量的处理上等同： iris_num &lt;- iris %&gt;% mutate(Species_num = as.numeric(Species)) ggplot(iris_num, aes(Sepal.Length, y = Species_num, group = Species_num)) + geom_density_ridges() 山脊线图的长尾部分可以通过设置 rel_min_height (relative min height) 截断，例如 rel_min_height = 0.01将截断密度估计小于最高点 1% 的全部尾部。一般而言 0.01 这个值已经比较合适了，但是不同的数据集可能还是要自行调整： ggplot(iris_num, aes(Sepal.Length, y = Species_num, group = Species_num)) + geom_density_ridges(rel_min_height = 0.01) scale 参数控制不同分组的密度面积图的重叠情况，scale = 1 意味着最高的密度曲线正好触及到第二高密度曲线的基线。scale 越小，分隔越大；scale越大，重叠越多： p + geom_density_ridges(scale = 0.8) p + geom_density_ridges(scale = 2) Figure 1.2: scale = 0.8 vs. scale = 2 1.4 映射填充色 (Varying fill colors along the x axis) ggridges 提供了两个函数 geom_ridgeline_gradient() 和 geom_density_ridge_gradient()，它们与对应的 geom_ridgeline 和 geom_density_ridge_gradient() 的工作方式完全相同，但 gradient 版本允许面积图的填充色沿着 x 轴变化。 然而，出于 R 绘图系统的天然限制，在 gradient 版本的山脊线图中不能同时设置透明度。 一个使用 geom_ridgeline_gradient() 的例子： library(viridis) d &lt;- data.frame(x = rep(1:5, 3) + c(rep(0, 5), rep(0.3, 5), rep(0.6, 5)), y = c(rep(0, 5), rep(1, 5), rep(3, 5)), height = c(0, 1, 3, 4, 0, 1, 2, 3, 5, 4, 0, 5, 4, 4, 1)) ggplot(d, aes(x, y, height = height, group = y, fill = factor(x + y))) + geom_ridgeline_gradient() + scale_fill_viridis(discrete = TRUE, direction = -1) 下面是一个用 geom_density_ridges_gradient() 的例子： 注意这里我们映射到 fill 上的不是原数据集中的变量 temperature，而是生成变量 ..x..。 因为geom_density_ridges_gradient 的统计变换 stat_density_ridges 在估计密度同时生成了新的 x 轴变量 lincoln_weather ## 顺便提一下，这是个典型的 messy dataset #&gt; # A tibble: 366 x 24 #&gt; CST `Max Temperatur~ `Mean Temperatu~ `Min Temperatur~ `Max Dew Point ~ #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 2016~ 37 24 11 19 #&gt; 2 2016~ 41 23 5 22 #&gt; 3 2016~ 37 23 8 23 #&gt; 4 2016~ 30 17 4 24 #&gt; 5 2016~ 38 29 19 29 #&gt; 6 2016~ 34 33 32 33 #&gt; # ... with 360 more rows, and 19 more variables: `Mean Dew Point [F]` &lt;int&gt;, #&gt; # `Min Dewpoint [F]` &lt;int&gt;, `Max Humidity` &lt;int&gt;, `Mean Humidity` &lt;int&gt;, `Min #&gt; # Humidity` &lt;int&gt;, `Max Sea Level Pressure [In]` &lt;dbl&gt;, `Mean Sea Level #&gt; # Pressure [In]` &lt;dbl&gt;, `Min Sea Level Pressure [In]` &lt;dbl&gt;, `Max Visibility #&gt; # [Miles]` &lt;int&gt;, `Mean Visibility [Miles]` &lt;int&gt;, `Min Visibility #&gt; # [Miles]` &lt;int&gt;, `Max Wind Speed [MPH]` &lt;int&gt;, `Mean Wind Speed[MPH]` &lt;int&gt;, #&gt; # `Max Gust Speed [MPH]` &lt;int&gt;, `Precipitation [In]` &lt;chr&gt;, CloudCover &lt;int&gt;, #&gt; # Events &lt;chr&gt;, `WindDir [Degrees]` &lt;int&gt;, Month &lt;fct&gt; ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) + geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) + scale_fill_viridis(name = &quot;Temp. [F]&quot;, option = &quot;C&quot;) + labs(title = &#39;Temperatures in Lincoln NE in 2016&#39;) + theme_ridges() 尽管最常见的做法是把 ..x.. 分组变量 y 、生成变量 ..quantile.. 映射到 fill 上，但这不是全部可能，下面的例子使用 ggridges::Catalan_elections 数据集，它记录了加泰罗尼亚地区 949 个自治市 1980 - 2015 年以来在 11 次地区大选中对 Indy 和 Unionist 两党的投票情况： Catalan_elections #&gt; # A tibble: 20,764 x 4 #&gt; Municipality Year Option Percent #&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Abella de la Conca 1980 Indy 68.4 #&gt; 2 Abella de la Conca 1984 Indy 95.7 #&gt; 3 Abella de la Conca 1988 Indy 89.4 #&gt; 4 Abella de la Conca 1992 Indy 81.7 #&gt; 5 Abella de la Conca 1995 Indy 80 #&gt; 6 Abella de la Conca 1999 Indy 74.7 #&gt; # ... with 2.076e+04 more rows Catalan_elections %&gt;% mutate(Year = fct_rev(as.factor(Year))) %&gt;% ggplot(aes(Percent, Year, fill = Option)) + geom_density_ridges(alpha = 0.6) + theme_ridges() + scale_fill_manual(values = c(&quot;#ff0000&quot;, &quot;#0000ff&quot;)) + scale_x_continuous(expand = c(0.01, 0)) + scale_y_discrete(expand = c(0, 0)) + labs(title = &quot;Indy vs Unionist vote in Catalan elections&quot;, subtitle = &quot;Analysis unit: municipalities (n = 949)&quot;) + theme(axis.title.y = element_blank()) 1.5 统计变换 可以把 stat_density_ridges 看作是山脊线图版本的 stat_density，除了自动用生成的密度估计映射到 height 上以外，这个统计变换还提供了一些很有用的特色。 1.5.1 分位数线 (Quantile lines and coloring by quantiles or probabilities) 在 stat_density_ridges() 中设置 quantile_lines = TRUE 可以在图形中添加分位数线： p + stat_density_ridges(quantile_lines = TRUE) 几何对象 geom_density_ridges() 中没有本节中很多参数的代码提示，但效果与在统计变换中设置参数相同 可以用 quantiles 参数控制分位数的计算： ## 将密度面积图分为两段，只计算中位数 p + stat_density_ridges(quantile_lines = TRUE, quantiles = 2) ## 指定计算两个分位数 p + stat_density_ridges(quantile_lines = TRUE, quantiles = c(0.025, 0.975), alpha = 0.7) 我们同样可以把分位数的生成变量 ..quantile..(设置scale_fill_viridis(discrete = T后，这个生成变量不再是具体的数值，而是标识 x 属于某个分位区间的离散变量) 映射到 fill 属性上，但必须在统计变换stat_density_ridges()中设定 calc_ecdf = TRUE 才能引用这个生成变量： ggplot(iris, aes(Sepal.Length, Species, fill = ..quantile..)) + stat_density_ridges(calc_ecdf = T, geom = &quot;density_ridges_gradient&quot;) + scale_fill_viridis(discrete = TRUE, name = &quot;Quartiles&quot;) 别忘了在 stat_density_ridges 中设定 geom = \"density_ridges_gradient\"。该统计变换的几何对象 geom_density_ridges 可不支持沿 x 轴变换填充色。 借用以上的思路，如果我们想强调分布的尾端，可以这样做： ggplot(iris, aes(Sepal.Length, Species, fill = ..quantile..)) + stat_density_ridges(calc_ecdf = T, quantiles = c(0.025, 0.975), geom = &quot;density_ridges_gradient&quot;) + scale_fill_manual( values = c(&quot;#FF0000A0&quot;, &quot;#A0A0A0A0&quot;, &quot;#0000FFA0&quot;), labels = c(&quot;(0, 0.025]&quot;, &quot;(0.025, 0.975]&quot;, &quot;(0.975, 1]&quot;), name = &quot;Probability&quot; ) calc_ecdf = T 时，还可以引用另外一个生成变量 ..ecdf..，即经验分布函数的值： ggplot(iris, aes(Sepal.Length, Species, fill = ..ecdf..)) + stat_density_ridges(calc_ecdf = T, geom = &quot;density_ridges_gradient&quot;) + scale_fill_viridis(name = &quot;Tail Probablity&quot;, direction = -1) quantile_lines = T 将自动设置 calc_ecdf = T 1.5.2 添加抖动点 stat_density_ridges 同样提供了一个选项，可以直接显示数据点的分布情况，在统计变换或几何对象中设置 jittered_points = TRUE: p + geom_density_ridges(jittered_points = TRUE) 位置调整 position = \"raincloud\" 将抖动点移至面积图下部，类似云雨图的效果： p + geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;) 调整 scale 和 alpha 减小遮盖： p + geom_density_ridges(jittered_points = TRUE, position = &quot;raincloud&quot;, scale = 0.9, alpha = 0.7) 也可以模拟一个地毯图： p + geom_density_ridges( jittered_points = TRUE, position = position_points_jitter(width = 0.05, height = 0), point_shape = &#39;|&#39;, point_size = 3, point_alpha = 1, alpha = 0.7, ) 注意上面所用的位置调整是 position_points_jitter(), 若是position_jitter() 则密度图也要被抖动了，而之前使用的position_raincloud本就是针对整体的位置调整。 为了设置这些抖动点的样式，ggridges 提供了一个特殊的标度调整 scale_discrete_manual，我们可以用它为任意离散映射手动设置标度。除此之外，还有很多关于抖动点属性的标度族scale_point_*: ggplot(iris, aes(x=Sepal.Length, y=Species, fill = Species)) + geom_density_ridges( aes(point_color = Species, point_fill = Species, point_shape = Species), alpha = .2, point_alpha = 1, jittered_points = TRUE ) + scale_point_color_hue(l = 40) + scale_discrete_manual(aesthetics = &quot;point_shape&quot;, values = c(21, 22, 23)) 所有在 ggplot2 中点的属性都可以在这里被映射，例如我们将 Petal.Length 映射到点的大小上： ggplot(iris, aes(Sepal.Length, Species, fill = Species)) + geom_density_ridges(aes(point_shape = Species, point_fill = Species, point_size = Petal.Length), jittered_points = T, alpha = 0.2, point_alpha = 1) + scale_point_color_hue(l = 40) + scale_point_size_continuous(range = c(0.5, 4)) + scale_discrete_manual(aesthetics = &quot;point_shape&quot;, values = c(21, 22, 23)) 类似的，可以用 vline_* 开头的属性族控制分位数线的形态,可以把山峦图、抖动点和分位数线同时呈现，例如： ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_density_ridges( jittered_points = TRUE, quantile_lines = TRUE, scale = 0.9, alpha = 0.7, vline_size = 1, vline_color = &quot;blue&quot;, point_size = 0.4, point_alpha = 1, position = position_raincloud(adjust_vlines = T)) ## 否则分位数线在原位置 1.5.3 其他统计变换 我们可以在 geom_density_ridges 中设置其他的统计变换，例如 stat_density，它和 stat_density_ridges 在具体的密度估计算法上有一些差别 : p + geom_density_ridges(aes(height = ..density..), stat = &quot;density&quot;) p + geom_density_ridges() Figure 1.3: stat_density vs. stat_density_ridges stat_density_ridges estimates the data range and bandwidth for the density estimation from the entire data at once, rather than from each individual group of data. 如果相对于密度曲线更偏爱直方图，可以用统计变换 stat = \"binline\"，一般而言对于直方图都会设置(scale &lt; 1)，同时可设置 draw_baseline = F 取消直方图两端的水平线(rel_min_height 对于直方图效果不好)： p + geom_density_ridges(aes(fill = Species), stat = &quot;binline&quot;, draw_baseline = F, scale = 0.8, alpha = 0.4) 1.6 主题 在简介中，介绍过 ggridges 为山脊线图专门设计的主题 theme_ridges, 不妨查看一下它的代码： #&gt; #&gt; theme_ridges &lt;- function(font_size = 14, font_family = &quot;&quot;, line_size = .5, grid = TRUE, center_axis_labels = FALSE) { #&gt; half_line &lt;- font_size / 2 #&gt; small_rel &lt;- 0.857 #&gt; small_size &lt;- small_rel * font_size #&gt; color &lt;- &quot;grey90&quot; #&gt; #&gt; if (grid) { #&gt; panel.grid.major &lt;- element_line(colour = color, size = line_size) #&gt; axis.ticks &lt;- element_line(colour = color, size = line_size) #&gt; axis.ticks.y &lt;- axis.ticks #&gt; } #&gt; else { #&gt; panel.grid.major &lt;- element_blank() #&gt; axis.ticks &lt;- element_line(colour = &quot;black&quot;, size = line_size) #&gt; axis.ticks.y &lt;- element_blank() #&gt; } #&gt; #&gt; if (center_axis_labels) { #&gt; axis_just &lt;- 0.5 #&gt; } #&gt; else { #&gt; axis_just &lt;- 1.0 #&gt; } 简单来说，theme_ridges() 取消了大部分网格线(只要用户没有提前设置grid())，并修改了刻度线的样式，取消了 y 轴上的刻度线 p + geom_density_ridges(aes(fill = Species)) p + geom_density_ridges(aes(fill = Species)) + theme_ridges() Figure 1.4: default theme vs. theme_ridges() 在添加theme_ridges()的基础上，还可以进一步设置标度中的expand，使图形更加紧凑： p + geom_density_ridges(aes(fill = Species)) + theme_ridges() + scale_x_continuous(expand = c(0.01, 0)) + scale_y_discrete(expand = c(0.01, 0)) 用 bbplot::bbc_style() 做主题，似乎效果也不错： windowsFonts(Helvetica = &quot;TT Arial&quot;) p + geom_density_ridges(aes(fill = Species)) + bbplot::bbc_style() 1.7 循环标度 经验上，当密度面积图的填充色有一定的交替规律时，山脊线图最能吸引人，出于此，ggridges 提供了循环标度 (cyclical scales)。这些标度可以循环使用提供给它们的属性值，例如 scale_fill_cyclical(values = c(\"blue\", \"green\")) 将交替使用蓝色和绿色作为填充色： ggplot(diamonds, aes(price, cut, fill = cut)) + geom_density_ridges(scale = 4) + scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;)) 默认情况下，循环标度不显示图例，guide = legend 可以改变这一点，但这种图例往往具有误导性： ## 循环标度的图例 ggplot(diamonds, aes(price, cut, fill = cut)) + geom_density_ridges(scale = 4) + scale_fill_cyclical(values = c(&quot;blue&quot;, &quot;green&quot;), guide = &quot;legend&quot;) 普通标度中中修饰图例的方法在循环标度中依然适用： ggplot(diamonds, aes(price, cut, fill = cut)) + geom_density_ridges(scale = 4) + scale_fill_cyclical( values = c(&quot;blue&quot;, &quot;green&quot;), guide = &quot;legend&quot;, labels = c(&quot;Fair&quot; = &quot;blue&quot;, &quot;Good&quot; = &quot;green&quot;), name = &quot;Fill colors&quot; ) 可以为多个属性设置循环标度，设置相同的label、value、name时图例会自行合并： ggplot(diamonds, aes(price, cut, fill = cut, color = cut)) + geom_density_ridges(scale = 4, size = 1) + scale_fill_cyclical( values = c(&quot;blue&quot;, &quot;green&quot;), guide = &quot;legend&quot;, labels = c(&quot;Fair&quot; = &quot;blue w/ black outline&quot;, &quot;Good&quot; = &quot;green w/ yellow outline&quot;), name = &quot;Color scheme&quot; ) + scale_color_cyclical( values = c(&quot;black&quot;, &quot;yellow&quot;), guide = &quot;legend&quot;, labels = c(&quot;Fair&quot; = &quot;blue w/ black outline&quot;, &quot;Good&quot; = &quot;green w/ yellow outline&quot;), name = &quot;Color scheme&quot; ) 循环标度同样可以运用到 ggridges 以外的图形中： mpg %&gt;% group_by(class) %&gt;% tally() %&gt;% arrange(desc(n)) %&gt;% mutate(class = factor(class, levels = class)) %&gt;% ggplot(aes(class, n, fill = class)) + geom_col() + scale_fill_cyclical(values = c(&quot;#4040B0&quot;, &quot;#9090F0&quot;)) + scale_y_continuous(expand = c(0, 0)) + theme_minimal() 1.8 实例：澳大利亚运动员身高 本例使用数据： df &lt;- as_tibble(DAAG::ais) df #&gt; # A tibble: 202 x 13 #&gt; rcc wcc hc hg ferr bmi ssf pcBfat lbm ht wt sex sport #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; #&gt; 1 3.96 7.5 37.5 12.3 60 20.6 109. 19.8 63.3 196. 78.9 f B_Ba~ #&gt; 2 4.41 8.3 38.2 12.7 68 20.7 103. 21.3 58.6 190. 74.4 f B_Ba~ #&gt; 3 4.14 5 36.4 11.6 21 21.9 105. 19.9 55.4 178. 69.1 f B_Ba~ #&gt; 4 4.11 5.3 37.3 12.6 69 21.9 126. 23.7 57.2 185 74.9 f B_Ba~ #&gt; 5 4.45 6.8 41.5 14 29 19.0 80.3 17.6 53.2 185. 64.6 f B_Ba~ #&gt; 6 4.1 4.4 37.4 12.5 42 21.0 75.2 15.6 53.8 174 63.7 f B_Ba~ #&gt; # ... with 196 more rows 可以将运动项目作为分组变量，但绘图之前先要将其重新编码： df$sport &lt;- fct_recode(df$sport, &quot;Basketball&quot; = &quot;B_Ball&quot;, &quot;Track 400m&quot; = &quot;T_400m&quot;, &quot;Track Sprint&quot; = &quot;T_Sprnt&quot;, &quot;Water Polo&quot; = &quot;W_Polo&quot; ) 绘制基本图形： p1 &lt;- ggplot(df, aes(ht, sport)) p1 + stat_density_ridges() 添加抖动点、将性别 sex 映射到 fill 上： p2 &lt;- p1 + stat_density_ridges(aes(fill = sex, point_color = sex), alpha = 0.4, jittered_points = TRUE, point_shape = &quot;|&quot;, point_size = 2, size = 0.25, position = position_points_jitter(height = 0)) p2 标度调整、图例修饰、主题设置: p2 + scale_y_discrete(expand = c(0.01, 0)) + scale_x_continuous(expand = c(0, 0), name = &quot;height [cm]&quot;) + scale_fill_manual(values = c(&quot;#D55E0050&quot;, &quot;#0072B250&quot;), labels = c(&quot;female&quot;, &quot;male&quot;)) + scale_discrete_manual(&quot;point_color&quot;, values = c(&quot;#D55E00&quot;, &quot;#0072B2&quot;), guide = &quot;none&quot;) + guides(fill = guide_legend( override.aes = list( fill = c(&quot;#D55E00A0&quot;, &quot;#0072B2A0&quot;), color = NA, point_color = NA)) ) + labs(title = &quot;Heights of Australian Atheletes&quot;) + theme_ridges() "],
["ggpubr.html", "2 ggpubr 2.1 ggbarplot 2.2 ggdotchart 2.3 ggscatter 2.4 ggscatterhist 2.5 ggarrange", " 2 ggpubr ggpubr 是一个基于 ggplot2 图形的图表包，全称为全称为“‘ggplot2’ Based Publication Ready Plots”。它并不提供额外的集合对象、统计变换和标度等，而是以 gg* 函数族直接创建图形对象，并将属性映射、标度调整、统计变换、排版、主题设置等功能全部设置在这个函数中, 不过也可以和 ggplot2 函数创建的图层叠加。个人认为这个包其实不太符合 ggplot2 的设计思想，这里只简单介绍几个比较喜欢的函数和可视化方案。 参考： https://rpkgs.datanovia.com/ggpubr/index.html library(ggpubr) 2.1 ggbarplot ggpubr 提供的条形图函数 ggbarplot() 没有默认的统计变换 (类似 geom_col() )，有一个很方便的排序参数 sort.val，这样我们就不必对要呈现的变量事先排序。此外 ggpubr 包还带有一些不错的期刊配色方案(在 palette 中设置) ## 数据 dfm &lt;- rownames_to_column(mtcars, var = &quot;name&quot;) dfm$cyl &lt;- as.factor(dfm$cyl) head(dfm) #&gt; name mpg cyl disp hp drat wt qsec vs am gear carb #&gt; 1 Mazda RX4 21.0 6 160 110 3.90 2.62 16.5 0 1 4 4 #&gt; 2 Mazda RX4 Wag 21.0 6 160 110 3.90 2.88 17.0 0 1 4 4 #&gt; 3 Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 #&gt; 4 Hornet 4 Drive 21.4 6 258 110 3.08 3.21 19.4 1 0 3 1 #&gt; 5 Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 #&gt; 6 Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 降序 sort.val = &quot;desc&quot; ggbarplot(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, fill = &quot;cyl&quot;, # change fill color by cyl color = &quot;white&quot;, # Set bar border colors to white palette = &quot;jco&quot;, # jco journal color palett. see ?ggpar sort.val = &quot;desc&quot;, # Sort the value in ascending order x.text.angle = 90 # Rotate vertically x axis texts ) ## 升序 sort.val = &quot;asc&quot; ggbarplot(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, fill = &quot;cyl&quot;, # change fill color by cyl color = &quot;white&quot;, # Set bar border colors to white palette = &quot;jco&quot;, # jco journal color palett. see ?ggpar sort.val = &quot;asc&quot;, # Sort the value in ascending order x.text.angle = 90 # Rotate vertically x axis texts ) sort.by.groups = TRUE 可以使排序在组内进行，rotate 可以水平 / 竖直颠倒条形图 ggbarplot(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, fill = &quot;cyl&quot;, # change fill color by cyl color = &quot;white&quot;, # Set bar border colors to white palette = &quot;jco&quot;, # jco journal color palett. see ?ggpar sort.val = &quot;desc&quot;, # Sort the value in ascending order sort.by.groups = TRUE, # Sort inside each group rotate = TRUE # Don&#39;t sort inside each group ) 上图中的 y 轴标签过大，ggpubr 中的 font() 函数用于调整主标题、副标题、坐标轴标题和标签，调用方式类似于 ggplot2 中的主题函数，直接添加到图形对象上： ggbarplot(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, fill = &quot;cyl&quot;, # change fill color by cyl color = &quot;white&quot;, # Set bar border colors to white palette = &quot;jco&quot;, # jco journal color palett. see ?ggpar sort.val = &quot;desc&quot;, # Sort the value in ascending order sort.by.groups = TRUE, # Sort inside each group rotate = TRUE, # Don&#39;t sort inside each group xlab = FALSE, ylab = FALSE ) + font(&quot;y.text&quot;, size = 8, face = &quot;italic&quot;) + font(&quot;legend.title&quot;, color = &quot;red&quot;, face = &quot;bold&quot;) 更多的设置可见： https://rpkgs.datanovia.com/ggpubr/reference/font.html 2.2 ggdotchart ggdotchart 是 ggpubr 中用于创建点图（一个离散分组变量，一个连续变量，非散点图）的函数： ## 基础用法 ggdotchart(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;) 在此基础上，ggdotchart() 可以轻松绘制出 Cleveland 点图（lollipop chart）, 关键是设置参数 add = \"segment\"： ggdotchart(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, add = &quot;segment&quot;) # Add segments from y = 0 to dots 将 cyl 映射到点的颜色上 用 add.params 改变线段的样式 使用 ggpubr 的主题 theme_pubr() ggdotchart(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, color = &quot;cyl&quot;, # Color by groups palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), # Custom color palette add = &quot;segments&quot;, # Add segments from y = 0 to dots add.params = list(color = &quot;lightgray&quot;, size = 2), ggtheme = theme_pubr() # ggplot2 theme ) 下面： ggdotchart默认的排序是升序，更改为sorting = “descending” 翻转坐标轴: rotate = TRUE 使得 mpg 的值在组内排序，而不是总体排序：group = “cyl” 增大点的大小，为了下一步增加标签 dot.size = 6 增加数据标签 label = “mpg” 或者 label = round(dfm$mpg) 用 font.label 设置数据标签的格式 ggdotchart(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, color = &quot;cyl&quot;, # Color by groups palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), # Custom color palette sorting = &quot;descending&quot;, # Sort value in descending order add = &quot;segments&quot;, # Add segments from y = 0 to dots add.params = list(color = &quot;lightgray&quot;, size = 2), rotate = TRUE, # Rotate vertically group = &quot;cyl&quot;, # Order by groups dot.size = 6, # Large dot size label = round(dfm$mpg), # Add mpg values as dot labels font.label = list(color = &quot;white&quot;, size = 9, vjust = 0.5), # Adjust label parameters ggtheme = theme_pubr() # ggplot2 theme ) ggdotchart 还有一大特色： 坐标轴标签的颜色也成为可以映射的变量。在下面的图中设置： y.text.col = TRUE 将当前分组变量映射到 y 轴标签颜色上 ; theme_cleveland() 添加虚线： ggdotchart(dfm, x = &quot;name&quot;, y = &quot;mpg&quot;, color = &quot;cyl&quot;, # Color by groups palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), # Custom color palette sorting = &quot;descending&quot;, # Sort value in descending order rotate = TRUE, # Rotate vertically dot.size = 2, # Large dot size y.text.col = TRUE, # Color y text by groups ggtheme = theme_pubr() # ggplot2 theme ) + theme_cleveland() + # Add dashed grids + font(&quot;y.text&quot;, size = 8, face = &quot;italic&quot;) 2.3 ggscatter 参考： https://rpkgs.datanovia.com/ggpubr/reference/ggscatter.html ggscatter()用于创建二维散点图（两个连续型变量，区分于之前的点图）： df &lt;- mtcars df$cyl &lt;- as.factor(df$cyl) ## 简单散点图 ggscatter(df, x = &quot;wt&quot;, y = &quot;mpg&quot;, color = &quot;cyl&quot;) 这里介绍 ggscatter 的最主要原因是因为它可以很方便地在散点图上添加有关回归模型和相关系数的数据标记： add = \"reg.line\" 和 add = \"loess\" 添加线性回归和局部加权回归拟合线 add.params: 设置拟合线的样式，例如 add.params = list(color = \"red\") cor.coef = TRUE 添加数据标记，展示相关系数和其 p value cor.coef.args 指定相关系数算法和呈现细节 cor.method: 指定相关系数的算法，有“pearson”, “kendall” 和 “spearman” cor.coef.size: 调节该标签的大小 ggscatter(df, x = &quot;wt&quot;, y = &quot;mpg&quot;, color = &quot;black&quot;, shape = 21, size = 3, # Points color, shape and size add = &quot;reg.line&quot;, # Add regressin line add.params = list(color = &quot;blue&quot;, fill = &quot;lightgray&quot;), # Customize reg. line conf.int = TRUE, # Add confidence interval cor.coef = TRUE, # Add correlation coefficient. see ?stat_cor cor.coeff.args = list(method = &quot;pearson&quot;, label.x = 3, label.sep = &quot;\\n&quot;) ) conf.int = TRUE（默认） 和 conf.int.level（默认 0.95） 可以绘制置信区间： ggscatter( df, x = &quot;wt&quot;, y = &quot;mpg&quot;, color = &quot;black&quot;, shape = 21, size = 3, add = &quot;loess&quot;, add.params = list(color = &quot;blue&quot;), conf.int = TRUE, conf.int.level = 0.9 ) 2.4 ggscatterhist ggpubr 中的 ggscatterhist() 函数将散点图与直方图 / 密度图结合在一起： ## 创造数据 set.seed(20191011) x1 &lt;- rnorm(200, 1.5, 0.5) y1 &lt;- rnorm(200, 2, 0.2) x2 &lt;- rnorm(200, 2.5, 0.5) y2 &lt;- rnorm(200, 2.5, 0.5) x3 &lt;- rnorm(200, 1, 0.3) y3 &lt;- rnorm(200, 1.5, 0.2) data &lt;- tibble(x = c(x1, x2, x3), y = c(y1, y2, y3), class = rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 200)) ## 绘图 ggscatterhist( data = data, x = &quot;x&quot;, y = &quot;y&quot;, shape = 21, color = &quot;black&quot;, fill = &quot;class&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;) ) margin.plot = \"density\"(默认) 绘制核密度估计图，选择 “histogram” 绘制直方图；“boxplot”为直方图： ggscatterhist( data = data, x = &quot;x&quot;, y = &quot;y&quot;, shape = 21, color = &quot;black&quot;, fill = &quot;class&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), margin.plot = &quot;histogram&quot; ) margin.params 用一个列表设置边缘图形的参数；ggtheme 设置主题： ggscatterhist( data = data, x = &quot;x&quot;, y = &quot;y&quot;, shape = 21, color = &quot;black&quot;, fill = &quot;class&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), margin.plot = &quot;boxplot&quot;, margin.params = list(alpha = 0.5, fill = &quot;class&quot;, color = &quot;black&quot;), ggtheme = theme_minimal() ) xlab 和 ylab 设置坐标轴标签，title 设置图表标题： ggscatterhist( data = data, x = &quot;x&quot;, y = &quot;y&quot;, shape = 21, color = &quot;black&quot;, fill = &quot;class&quot;, palette = c(&quot;#00AFBB&quot;, &quot;#E7B800&quot;, &quot;#FC4E07&quot;), margin.plot = &quot;boxplot&quot;, margin.params = list(alpha = 0.5, fill = &quot;class&quot;, color = &quot;black&quot;), ggtheme = theme_minimal(), xlab = FALSE, ## 取消标签 ylab = FALSE, title = &quot;A scatterhist plot&quot; ) 2.5 ggarrange 参考： https://www.rdocumentation.org/packages/ggpubr/versions/0.2.3/topics/ggarrange ggarrange() 是用来排版多个 ggplot 图像对象的函数(不止是 ggplot2 的图形才是 ggplot 对象)。最重要的几个参数为： ggarrange(... nrow, ncol, widths, heights, label) ...: 任意数目的 ggplot 对象，传入 NULL 则对应位置为空白 nrow 和 ncol 控制多个 ggplot 对象呈现的行数和列数 widths 和 heights 控制一行 / 列内图像所占区域的相对大小，如 width = c(2, 1) 将绘图区横向切分为两个部分，宽度比为 2 ： 1 每个子图的标签 data(&quot;ToothGrowth&quot;) df &lt;- ToothGrowth df$dose &lt;- as.factor(df$dose) # Box plot bxp &lt;- ggboxplot(df, x = &quot;dose&quot;, y = &quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;) # Dot plot dp &lt;- ggdotplot(df, x = &quot;dose&quot;, y = &quot;len&quot;, color = &quot;dose&quot;, palette = &quot;jco&quot;) # Density plot dens &lt;- ggdensity(df, x = &quot;len&quot;, fill = &quot;dose&quot;, palette = &quot;jco&quot;) # Arrange ggarrange(bxp, dp, NULL, dens, ncol = 2, nrow = 2, labels = c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)) common.legend = TRUE 可以为多个 ggplot 对象 创建统一图例： ggarrange(bxp, dp, ncol = 2, common.legend = TRUE) "],
["ggpointdensity.html", "3 ggpointdensity", " 3 ggpointdensity library(patchwork) library(viridis) library(ggpointdensity) ggplot2 主要提供了 stat_density_2d 和 geom_bin_2d 缓解二维散点图的重叠问题： set.seed(2019) dat &lt;- bind_rows( tibble(x = rnorm(7000, sd = 1), y = rnorm(7000, sd = 10), group = &quot;foo&quot;), tibble(x = rnorm(3000, mean = 1, sd = .5), y = rnorm(3000, mean = 7, sd = 5), group = &quot;bar&quot;)) p1 &lt;- ggplot(dat, aes(x, y)) + geom_point() p2 &lt;- ggplot(dat, aes(x, y, fill = ..level..)) + stat_density_2d(geom = &quot;polygon&quot;) + scale_fill_viridis() p3 &lt;- ggplot(dat, aes(x, y)) + geom_bin2d() + scale_fill_viridis() p1 / (p2 + p3) 这两种办法可以很好地反映二维点的集中趋势，但不足之处是不易于观察单个离群点。 ggpointdensity 提供的 geom_pointdensity() 保留了点作为基本几何对象，并将周围点的个数映射到 color 上： ggplot(dat, aes(x, y)) + geom_pointdensity() + scale_color_viridis() adjust 用来调整视为 “邻近” 的距离： ggplot(dat, aes(x, y)) + geom_pointdensity(adjust = 0.1, show.legend = F) + scale_color_viridis() ggplot(dat, aes(x, y)) + geom_pointdensity(adjust = 4, show.legend = F) + scale_color_viridis() Figure 3.1: large adjust(default to 1) makes more neighbors 与 ggplot2 的其他功能结合，例如分面： ggplot(dat, aes(x, y)) + geom_pointdensity() + scale_color_viridis() + facet_grid( ~ group) 改变点的大小或形状： dat_subset &lt;- sample_frac(dat, .1) # smaller data set ggplot(dat_subset, aes(x, y)) + geom_pointdensity(size = 3, shape = 17) + scale_color_viridis() Zooming into the axis works as well, keep in mind that xlim() and ylim() change the density since they remove data points. It may be better to use coord_cartesian() instead. ggplot(dat, aes(x, y)) + geom_pointdensity() + scale_color_viridis() + xlim(c(-1, 3)) + ylim(c(-5, 15)) ggplot(dat, aes(x, y)) + geom_pointdensity() + scale_color_viridis() + coord_cartesian(xlim = c(-1, 3), ylim = c(-5, 15)) "],
["others.html", "4 其他 4.1 云雨图 4.2 坡度图", " 4 其他 4.1 云雨图 云雨图可以看成核密度曲线估计图，箱线图和抖动散点图的组合图表。有三个主要图层：自定义的半小提琴函数 geom_flat_violin()、箱线图geom_boxplot() 和抖动散点图 geom_jitter()。其中定义半小提琴图的函数来自 https://gist.github.com/dgrtwo/eb7750e74997891d7c20 ## 半小提琴图的示例 source(&quot;R/geom_flat_violin.R&quot;) diamonds_sub &lt;- diamonds[sample(nrow(diamonds), 1500), ] p &lt;- ggplot(diamonds_sub, aes(cut, carat, fill = cut)) p + geom_flat_violin() 相比于 ggplot2 中的 geom_violin, 半小提琴图省却了多余的一半核密度估计曲线，这为叠加其他图层增加了方便： p + geom_flat_violin(position = position_nudge(x = 0.25)) + geom_boxplot(fill = &quot;white&quot;, position = position_nudge(x = 0.25), width = 0.1) + geom_jitter(aes(color = cut), width = 0.1, size = 0.5) 上面就是一副比较基本的云雨图了，几个关键点： 箱线图一般都会过宽，从而遮挡半小提琴图和散点图的位置，应该减小geom_boxplot() 中的 width 半小提琴图应该和箱线图在一条轴线上，且与抖动点分离。这里的操作是将 geom_flat_vilon() 和 geom_boxplot() 平移了相同距离 别忘了还要映射抖动点的颜色属性 4.2 坡度图 "],
["colors.html", "5 颜色 5.1 prismatic 5.2 paletteer", " 5 颜色 5.1 prismatic library(prismatic) rainbow(7) %&gt;% color() %&gt;% plot() 5.2 paletteer library(paletteer) library(pals) # for pal.bands() paletteer 是对一系列 R 包中调色板的收集，涵盖 ggsci、ggthemes、RcolorBrewer、viridis等，共包含 32 个包的 1009 个调色板, 完整的列表可见：https://emilhvitfeldt.github.io/paletteer/#included-packages paletteer 将调色板分为两大类： 连续型调色板：颜色数量没有限制，颜色之间的转换平滑 离散型调色板：又可继续分为固定宽度调色板 (fixed width palette) 和动态调色板 (dynamic palette)。固定宽度调色板只能提供有限的颜色数量，动态调色板可以根据要求自动生成任意数量的颜色 基于这样的分类，paletteer 提供了三个函数 paletteer_c、paletteer_d 和 paletteer_dynamic 分别用来生成连续型调色板、固定宽度调色板和动态调色板，通用的参数有： palette: 制定调色板，格式为 \"package::name\" n: 要生成的颜色数量，连续调色板和动态调色板必须指定，固定宽度调色板默认为全部颜色 direction = c(1, -1): 正序或逆序 一些例子： # continuous palette paletteer_c(&quot;scico::berlin&quot;, n = 20) #&gt; &lt;colors&gt; #&gt; #9EB0FFFF #7FABF0FF #5DA5DDFF #4093C0FF #307A9EFF #25617EFF #1C4960FF #153342FF #101F27FF #121112FF #200A03FF #2F0E00FF #421300FF #571B06FF #742C16FF #904430FF #AB5D4EFF #C6776CFF #E2928CFF #FFACACFF # fixed width palette paletteer_d(&quot;nord::afternoon_prarie&quot;) #&gt; &lt;colors&gt; #&gt; #486090FF #6078A8FF #7890A8FF #90A8C0FF #F0D8C0FF #D6BBCFFF #A8C0C0FF #C0D8D8FF #A8A890FF # dynamic palette paletteer_dynamic(&quot;cartography::blue.pal&quot;, 10) #&gt; &lt;colors&gt; #&gt; #B2DEF0FF #9FCFE5FF #8CC1DAFF #79B3CFFF #64A3C4FF #4B90B5FF #317DA7FF #206A94FF #17577CFF #0F4464FF scale_color_paletteer_c() 、 scale_fill_paletteer_c()、scale_color_paletteer_d()、scale_fill_paletteer_d() 可以为 ggplot2 对象设置颜色和填充的标度，调用参数和之前一样： ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() + scale_color_paletteer_d(&quot;ggsci::category10_d3&quot;) "],
["bbplot.html", "6 bbplot 6.1 简介：bbc_style() 和 finalize_plot() 6.2 折线图 6.3 条形图 6.4 哑铃图 6.5 直方图", " 6 bbplot 参考 bbc cookbook # devtools::install_github(&#39;bbc/bbplot&#39;) library(tidyverse) library(bbplot) knitr::opts_chunk$set(message=F,cache=T) 6.1 简介：bbc_style() 和 finalize_plot() bbplot 包中有两个函数：bbc_style() 和 finalise_plot() bbc_style() 封装了一些 ggplot2 中的主题设置，创建 BBC 风格的字号、字体、颜色、标度、边距等组件，不需要传入任何参数，这里列出几项它的重要设定： 设置了图形标题、副标题、坐标轴刻度的字体、字号（调大）和风格（粗体），取消了坐标轴标题 将图例移到上方，取消图例的标题和背景 取消 y 方向的刻度线(panel.grid.major.x = element_blank()), 修改 x 方向的刻度线颜色(panel.grid.major.y = element_line(color=\"#cbcbcb\")) 取消绘图区背景 (panel.background = element_blank())，将分面系统中的背景填充为白色 ## 查看 bbc_style() 源码 xfun::file_string(&quot;R/bbc_style.R&quot;) #&gt; #&gt; #&gt; bbc_style &lt;- function() { #&gt; font &lt;- &quot;Helvetica&quot; #&gt; #&gt; ggplot2::theme( #&gt; #&gt; #Text format: #&gt; #This sets the font, size, type and colour of text for the chart&#39;s title #&gt; plot.title = ggplot2::element_text(family=font, #&gt; size=28, #&gt; face=&quot;bold&quot;, #&gt; color=&quot;#222222&quot;), #&gt; #This sets the font, size, type and colour of text for the chart&#39;s subtitle, as well as setting a margin between the title and the subtitle #&gt; plot.subtitle = ggplot2::element_text(family=font, #&gt; size=22, #&gt; margin=ggplot2::margin(9,0,9,0)), #&gt; plot.caption = ggplot2::element_blank(), #&gt; #This leaves the caption text element empty, because it is set elsewhere in the finalise plot function #&gt; #&gt; #Legend format #&gt; #This sets the position and alignment of the legend, removes a title and backround for it and sets the requirements for any text within the legend. The legend may often need some more manual tweaking when it comes to its exact position based on the plot coordinates. #&gt; legend.position = &quot;top&quot;, #&gt; legend.text.align = 0, #&gt; legend.background = ggplot2::element_blank(), #&gt; legend.title = ggplot2::element_blank(), #&gt; legend.key = ggplot2::element_blank(), #&gt; legend.text = ggplot2::element_text(family=font, #&gt; size=18, #&gt; color=&quot;#222222&quot;), #&gt; #&gt; #Axis format #&gt; #This sets the text font, size and colour for the axis test, as well as setting the margins and removes lines and ticks. In some cases, axis lines and axis ticks are things we would want to have in the chart - the cookbook shows examples of how to do so. #&gt; axis.title = ggplot2::element_blank(), #&gt; axis.text = ggplot2::element_text(family=font, #&gt; size=18, #&gt; color=&quot;#222222&quot;), #&gt; axis.text.x = ggplot2::element_text(margin=ggplot2::margin(5, b = 10)), #&gt; axis.ticks = ggplot2::element_blank(), #&gt; axis.line = ggplot2::element_blank(), #&gt; #&gt; #Grid lines #&gt; #This removes all minor gridlines and adds major y gridlines. In many cases you will want to change this to remove y gridlines and add x gridlines. The cookbook shows you examples for doing so #&gt; panel.grid.minor = ggplot2::element_blank(), #&gt; panel.grid.major.y = ggplot2::element_line(color=&quot;#cbcbcb&quot;), #&gt; panel.grid.major.x = ggplot2::element_blank(), #&gt; #&gt; #Blank background #&gt; #This sets the panel background as blank, removing the standard grey ggplot background colour from the plot #&gt; panel.background = ggplot2::element_blank(), #&gt; #&gt; #Strip background (#This sets the panel background for facet-wrapped plots to white, removing the standard grey ggplot background colour and sets the title size of the facet-wrap title to font size 22) #&gt; strip.background = ggplot2::element_rect(fill=&quot;white&quot;), #&gt; strip.text = ggplot2::element_text(size = 22, hjust = 0) #&gt; ) #&gt; } 由于 Windows 系统没有 Helvetica 字体，使用 bbc_sytle() 时会触发警告 “ font family not found in Windows font database”。可以用 windowsFonts(Helvetica = “TT Arial”) 使 R 用 Arial 字体代替 Helvetica 需要注意的是折线图中的线条或者条形图中条形的颜色不由 bbc_style() 函数定制，需要使用标准的 ggplot 绘图函数指定。 finalise_plot() 是在图表发布前进行最后加工的函数，能够使图表的标题和副标题左对齐、添加信息来源、在图表右下脚添加照片。它还能将图表保存至指定的位置。这个函数有5个参数： plot_name: 变量名，如我们经常用变量 p 来存储 ggplot 图形 source:需要在图表左下角暂时的来源文字，需要在文字前先打上 “Source:”,比如 `source = “Source: ONS”。 svae_filepath:图表的保存路径，需要包括.png 后缀。 width_pixels:默认 640 px。hieght_pixels:，默认 450 px。 logo_image_path:指定在图表右下角需要展示的 logo 保存的位置。默认是一个 png 格式的占位文件，颜色和图表的背景色一样。如果你不需要展示 logo， 则无需调整此参数。当你想给图表增加 logo 时，通过此参数指定 logo 的位置即可。 6.2 折线图 使用 gapminder 数据集作一些试验： library(gapminder) gapminder #&gt; # A tibble: 1,704 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 Afghanistan Asia 1952 28.8 8425333 779. #&gt; 2 Afghanistan Asia 1957 30.3 9240934 821. #&gt; 3 Afghanistan Asia 1962 32.0 10267083 853. #&gt; 4 Afghanistan Asia 1967 34.0 11537966 836. #&gt; 5 Afghanistan Asia 1972 36.1 13079460 740. #&gt; 6 Afghanistan Asia 1977 38.4 14880372 786. #&gt; # ... with 1,698 more rows #Prepare data windowsFonts(Helvetica = &quot;TT Arial&quot;) line_df &lt;- gapminder %&gt;% filter(country == &quot;China&quot;) #Make plot line &lt;- ggplot(line_df, aes(x = year, y = lifeExp)) + geom_line(colour = &quot;#1380A1&quot;, size = 1) + geom_hline(yintercept = 0, size = 1, colour=&quot;#333333&quot;) ## 在 y = 0 处做一个标记是好习惯 line ## 添加 bbc_style() line + bbc_style() ## line + bbc_style() + labs(title=&quot;Living longer&quot;, subtitle = &quot;Life expectancy in China 1952-2007&quot;) 下面绘制一个多重折线图： multiple_line_df &lt;- gapminder %&gt;% filter(country == &quot;China&quot; | country == &quot;United States&quot;) multiple_line &lt;- ggplot(multiple_line_df) + geom_line(aes(year, lifeExp, color = country)) + geom_hline(yintercept = 0, size = 1, colour=&quot;#333333&quot;) + scale_colour_manual(values = c(&quot;#FAAB18&quot;, &quot;#1380A1&quot;)) multiple_line 添加 bbc_style() 和标题文字： multiple_line + bbc_style() + labs(title=&quot;Living longer&quot;, subtitle = &quot;Life expectancy in China and the US&quot;) 假使这是我们最终想要发布的版本，可以用 finalise_plot() 加工并保存： multiple_line &lt;- multiple_line + bbc_style() + labs(title=&quot;Living longer&quot;, subtitle = &quot;Life expectancy in China and the US&quot;) finalise_plot(plot_name = multiple_line, source_name = &quot;Source: Gapminder&quot;, save_filepath = &quot;images\\\\line chart.png&quot;, logo_image_path = &quot;images\\\\caution.png&quot;) 随后我们可以在 images 文件夹中找到这个 png 文件： 6.3 条形图 依旧使用 gapminder 数据： bar_df &lt;- gapminder %&gt;% filter(year == 2007 &amp; continent == &quot;Africa&quot;) %&gt;% arrange(desc(lifeExp)) %&gt;% head(5) bar_df #&gt; # A tibble: 5 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 Reunion Africa 2007 76.4 798094 7670. #&gt; 2 Libya Africa 2007 74.0 6036914 12057. #&gt; 3 Tunisia Africa 2007 73.9 10276158 7093. #&gt; 4 Mauritius Africa 2007 72.8 1250882 10957. #&gt; 5 Algeria Africa 2007 72.3 33333216 6223. ## 绘制条形图 bars &lt;- ggplot(bar_df, aes(x = country, y = lifeExp)) + geom_bar(stat=&quot;identity&quot;, position=&quot;identity&quot;, fill=&quot;#1380A1&quot;) + geom_hline(yintercept = 0, size = 1, colour=&quot;#333333&quot;) bars ## 添加 bbc_style() 并添加标题 bars + bbc_style() + labs(title = &quot;Reunion is the highest&quot;, subtitle = &quot;Highest African life expectancy, 2007&quot;) 6.3.1 堆积条形图 #prepare data stacked_df &lt;- gapminder %&gt;% filter(year == 2007) %&gt;% mutate(lifeExpGrouped = cut(lifeExp, breaks = c(0, 50, 65, 80, 90), labels = c(&quot;Under 50&quot;, &quot;50-65&quot;, &quot;65-80&quot;, &quot;80+&quot;))) %&gt;% group_by(continent, lifeExpGrouped) %&gt;% summarise(continentPop = sum(as.numeric(pop))) stacked_df #&gt; # A tibble: 13 x 3 #&gt; # Groups: continent [5] #&gt; continent lifeExpGrouped continentPop #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 Africa Under 50 376100713 #&gt; 2 Africa 50-65 386811458 #&gt; 3 Africa 65-80 166627521 #&gt; 4 Americas 50-65 8502814 #&gt; 5 Americas 65-80 856978229 #&gt; 6 Americas 80+ 33390141 #&gt; # ... with 7 more rows #set order of stacks by changing factor levels stacked_df$lifeExpGrouped = factor(stacked_df$lifeExpGrouped, levels = rev(levels(stacked_df$lifeExpGrouped))) ## create plot stacked_bars &lt;- ggplot(data = stacked_df, aes(x = continent, y = continentPop, fill = lifeExpGrouped)) + geom_bar(stat = &quot;identity&quot;, position = &quot;fill&quot;) stacked_bars ## 添加 bbc_style() stacked_bars + bbc_style() ## 完善 stacked_bars + bbc_style() + scale_y_continuous(labels = scales::percent) + scale_fill_viridis_d(direction = -1) + geom_hline(yintercept = 0, size = 1, colour = &quot;#333333&quot;) + labs(title = &quot;How life expectancy varies&quot;, subtitle = &quot;% of population by life expectancy band, 2007&quot;) + theme(legend.justification = &quot;left&quot;) + guides(fill = guide_legend(reverse = TRUE)) 6.3.2 簇状条形图 ## prepare data grouped_bar_df &lt;- gapminder %&gt;% filter(year == 1967 | year == 2007) %&gt;% head(10) grouped_bar_df #&gt; # A tibble: 10 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; #&gt; 1 Afghanistan Asia 1967 34.0 11537966 836. #&gt; 2 Afghanistan Asia 2007 43.8 31889923 975. #&gt; 3 Albania Europe 1967 66.2 1984060 2760. #&gt; 4 Albania Europe 2007 76.4 3600523 5937. #&gt; 5 Algeria Africa 1967 51.4 12760499 3247. #&gt; 6 Algeria Africa 2007 72.3 33333216 6223. #&gt; # ... with 4 more rows grouped_bars &lt;- ggplot(grouped_bar_df) + geom_bar(aes(country, lifeExp, fill = factor(year)), position = &quot;dodge&quot;, stat = &quot;identity&quot;) + geom_hline(yintercept = 0, size = 1, colour=&quot;#333333&quot;) grouped_bars ## 添加 bbc_style() grouped_bars + bbc_style() + scale_fill_manual(values = c(&quot;#1380A1&quot;, &quot;#FAAB18&quot;)) + labs(title=&quot;We&#39;re living longer&quot;, subtitle = &quot;Biggest life expectancy rise, 1967-2007&quot;) + theme(axis.text.x = element_text(size = 14)) ## bbc_style() 默认设置字号为 18 6.4 哑铃图 这里哑铃图的作法用到了 ggalt 包中便捷的 geom_dumbbell() 函数： ## prepare data library(ggalt) dumbbell_df &lt;- gapminder %&gt;% filter(year == 1967 | year == 2007) %&gt;% .[c(&quot;country&quot;, &quot;year&quot;, &quot;continent&quot;, &quot;lifeExp&quot;)] %&gt;% pivot_wider(names_from = year, values_from = lifeExp) %&gt;% mutate(gap = `2007` - `1967`) %&gt;% arrange(desc(gap)) %&gt;% head(10) ## 这里为了使用 geom_dumbbell() 没有再使用聚合函数 dumbbell_df #&gt; # A tibble: 10 x 5 #&gt; country continent `1967` `2007` gap #&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Oman Asia 47.0 75.6 28.7 #&gt; 2 Vietnam Asia 47.8 74.2 26.4 #&gt; 3 Yemen, Rep. Asia 37.0 62.7 25.7 #&gt; 4 Indonesia Asia 46.0 70.6 24.7 #&gt; 5 Libya Africa 50.2 74.0 23.7 #&gt; 6 Gambia Africa 35.9 59.4 23.6 #&gt; # ... with 4 more rows ## create plot dumbbell &lt;- ggplot(dumbbell_df, aes(x = `1967`, xend = `2007`, y = country)) + geom_dumbbell(colour = &quot;#dddddd&quot;, size = 3, colour_x = &quot;#FAAB18&quot;, colour_xend = &quot;#1380A1&quot; ) dumbbell ## 添加 bbc_style() dumbbell + bbc_style() ## 成图 dumbbell + bbc_style() + labs(title = &quot;we&#39;re living longer&quot;, subtitle = &quot;Biggest life expectancy rise, 1967-2007&quot;) 6.5 直方图 ## prepare data hist_df &lt;- gapminder %&gt;% filter(year == 2007) ## create plot hist_chart &lt;- ggplot(hist_df) + geom_histogram(aes(lifeExp), binwidth = 5, colour = &quot;white&quot;, fill = &quot;#1380A1&quot;) + geom_hline(yintercept = 0, size = 1, colour = &quot;#333333&quot;) + scale_x_continuous(limits = c(35, 95), breaks = seq(40, 90, by = 10), labels = c(&quot;40&quot;, &quot;50&quot;, &quot;60&quot;, &quot;70&quot;, &quot;80&quot;, &quot;90 years&quot;)) + labs(title = &quot;How life expectancy varies&quot;, subtitle = &quot;Distribution of life expectancy in 2007&quot;) hist_chart ## 添加 bbc_style() hist_chart + bbc_style() "],
["patchwork.html", "7 patchwork 7.1 布局和嵌套 7.2 注解 7.3 运算符 7.4 7.5 组合非 ggplot 元素", " 7 patchwork 安装： devtools::install_github(\"thomasp85/patchwork\") library(patchwork) 参考：https://github.com/thomasp85/patchwork patchwork 用于组合多个 ggplot 对象，方法非常简单，直接用 + 连接这些对象即可： p1 &lt;- ggplot(mtcars) + geom_point(aes(mpg, disp)) p2 &lt;- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) p1 + p2 当然，不必把 ggplot2 对象存储到某个变量中，而是可以直接通过绘图的叠加语法组合图形： ggplot(mtcars) + geom_point(aes(mpg, disp)) + ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) 7.1 布局和嵌套 默认情况下，多个 ggplot 对象进行叠加，若一行空间已满，进入下一行： p1 &lt;- ggplot(mtcars) + geom_point(aes(mpg, disp)) p2 &lt;- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) p3 &lt;- ggplot(mtcars) + geom_smooth(aes(disp, qsec)) p4 &lt;- ggplot(mtcars) + geom_bar(aes(carb)) p5 &lt;- ggplot(mtcars) + geom_violin(aes(cyl, mpg, group = cyl)) p1 + p2 + p3 + p4 + p5 可以追加 plot_layout 控制 patchwork 组合图形的布局，以下是主要参数： ncol、nrow: 组合后的维度 byrow: 与 matrix() 中类似，按行排列或按列排列 widths、heights: 一个指定各个 ggplot 对象在最终图形中相对宽度、高度的向量 # Use byrow to change how the grid is filled out p1 + p2 + p3 + p4 + p5 + plot_layout(byrow = FALSE) # Change the grid dimensions p1 + p2 + p3 + p4 + p5 + plot_layout(ncol = 2, widths = c(1, 2)) 可以用 () 表示 ggplot 对象在组合时的层级关系： p1 + p2 + (p3 + p4 + plot_layout(ncol = 1) ) + p5 + plot_layout(widths = c(2, 1)) plot_spacer 是一个空的占位对象： p1 + plot_spacer() + p2 7.2 注解 plot_annotaion() 向组合对象添加注解，几个参数： title、subtitle、caption: 最终组合对象的标题、副标题和注释 tag_levels: 每个子对象的标签。集中选择： “a” 小写字母，“A” 大写字母，“1” 阿拉伯数字，“i” 小写罗马数字，“I” 大写罗马数字 tag_prefix、tag_suffix: 标签的前缀和后缀 p1 + p2 + plot_annotation(title = &quot;A great plot!&quot;, caption = &quot;Source: me&quot;, tag_levels = &quot;i&quot;, tag_prefix = &quot;Fig &quot;) 7.3 运算符 除了 + 以外， patchwork 还定义了一些运算符。 - 使其左侧的（全部）对象和右侧的（全部）对象处于同一层级： p1 + p2 - p3 + plot_layout(ncol = 1) A note on semantics. If - is read as minus its use makes little sense as we are not removing plots. Think of it as a hyphen instead. | 和 \\ 表示对象是否位于同一行： p1 | p2 | p3 / p4 ## / 的优先级高于 | (p1 | p2 | p3) / p4 * 和 &amp; 可以便捷地修饰组合对象中的元素，* 只作用于最顶层的元素，而 &amp; 作用于所有元素： ## 所有元素应用 bbc_style() windowsFonts(Helvetica = &quot;TT Arial&quot;) (p1 + (p2 + p3) + plot_layout(nrow = 2)) &amp; bbplot::bbc_style() ## 最顶层元素应用 bbc_style() (p1 + (p2 + p3) + plot_layout(nrow = 2)) * bbplot::bbc_style() 7.4 library(grid) 7.5 组合非 ggplot 元素 library(grid) library(gridExtra) p1 + grid::textGrob(&#39;Some really important text!\\n这真的很重要!&#39;) tt3 &lt;- ttheme_minimal( core=list(bg_params = list(fill = blues9[1:4], col=NA), fg_params=list(fontface=3)), colhead=list(fg_params=list(col=&quot;navyblue&quot;, fontface=4L)), rowhead=list(fg_params=list(col=&quot;orange&quot;, fontface=3L))) p1 + gridExtra::tableGrob(mtcars[1:10, 1:2], theme = tt3) "],
["ggforce.html", "8 ggforce", " 8 ggforce library(ggforce) ggplot(iris, aes(Petal.Length, Petal.Width, colour = Species)) + geom_point() + facet_zoom(x = Species == &quot;versicolor&quot;) ggplot(mpg) + geom_autopoint() + facet_matrix(vars(drv:fl), layer.diag = 2, grid.y.diag = FALSE) + geom_autodensity(aes(fill = drv)) "],
["ggdark.html", "9 ggdark 9.1 dark_mode", " 9 ggdark library(tidyverse) library(ggdark) ggdark 提供了 ggplot2 内置主题(theme_gray, theme_classic等) 的”暗黑版本(dark version)“，例如 theme_gray(默认主题) 的暗黑版本为 dark_theme_gray。 diamonds_sub &lt;- diamonds[sample(nrow(diamonds), 5000), ] p &lt;- ggplot(diamonds_sub) + geom_point(aes(carat, price, color = cut)) + scale_y_continuous(label = scales::dollar) + guides(color = guide_legend(reverse = TRUE)) + labs(title = &quot;Prices of 5,000 round cut diamonds by carat and cut&quot;, x = &quot;Weight (carats)&quot;, y = &quot;Price in US dollars&quot;, color = &quot;Quality of the cut&quot;) + theme_gray() ## ggplot2 default p_dark &lt;- p + dark_theme_gray() p_dark 与在 ggplot2 中一样，我们可以自由修饰 ggdark 提供的主题： p_dark + theme( plot.background = element_rect(fill = &quot;grey10&quot;), panel.background = element_blank(), panel.grid.major = element_line(color = &quot;grey30&quot;, size = 0.2), panel.grid.minor = element_line(color = &quot;grey30&quot;, size = 0.2), legend.background = element_blank(), axis.ticks = element_blank(), legend.key = element_blank(), legend.position = c(0.815, 0.27) ) 调用任意一个主题的 dark version 过后，一些几何对象的默认图形属性将发生改变（例如 geom_point 中 color 的默认值会变为白色），调用 invert_geom_defaults() 重置。 其他主题的暗黑版本： mtcars2 &lt;- within(mtcars, { vs &lt;- factor(vs, labels = c(&quot;V-shaped&quot;, &quot;Straight&quot;)) am &lt;- factor(am, labels = c(&quot;Automatic&quot;, &quot;Manual&quot;)) cyl &lt;- factor(cyl) gear &lt;- factor(gear) }) p &lt;- ggplot(mtcars2) + geom_point(aes(wt, mpg, color = gear)) + facet_grid(vs ~ am) + labs(title = &quot;Fuel economy declines as weight increases&quot;, subtitle = &quot;(1973-74)&quot;, caption = &quot;Data from the 1974 Motor Trend US magazine.&quot;, x = &quot;Weight (1000 lbs)&quot;, y = &quot;Fuel economy (mpg)&quot;, color = &quot;Gears&quot;) p + dark_theme_grey() + ggtitle(&quot;p + dark_theme_gray()&quot;) p + theme_bw() + ggtitle(&quot;p + theme_bw()&quot;) p + dark_theme_linedraw() + ggtitle(&quot;p + dark_theme_linedraw()&quot;) p + theme_linedraw() + ggtitle(&quot;p + theme_liendraw()&quot;) p + dark_theme_light() + ggtitle(&quot;p + dark_theme_light()&quot;) p + theme_light() + ggtitle(&quot;p + theme_light()&quot;) p + dark_theme_dark() + ggtitle(&quot;p + dark_theme_dark()&quot;) p + theme_dark() + ggtitle(&quot;p + theme_dark()&quot;) p + dark_theme_minimal() + ggtitle(&quot;p + dark_theme_minimal()&quot;) p + theme_minimal() + ggtitle(&quot;p + theme_minimal()&quot;) p + dark_theme_classic() + ggtitle(&quot;p + dark_theme_classic()&quot;) p + theme_classic() + ggtitle(&quot;p + theme_classic()&quot;) p + dark_theme_void() + ggtitle(&quot;p + dark_theme_void()&quot;) p + theme_void() + ggtitle(&quot;p + theme_void()&quot;) 9.1 dark_mode dark_mode() 是一个可以作用于任何主题的函数，将其变为对应的暗黑版本。 library(ggthemes) p &lt;- ggplot(mtcars2, aes(wt, mpg)) + geom_point(aes(fill = vs), shape = 21) + theme_fivethirtyeight() p 转变 theme_fivethirtyeight: p + dark_mode(theme_fivethirtyeight()) "],
["ggthemes.html", "10 ggthemes", " 10 ggthemes "],
["hrbrthemes.html", "11 hrbrthemes 11.1 主题 11.2 标度", " 11 hrbrthemes 参考： https://github.com/hrbrmstr/hrbrthemes hrbrthemes 为 ggplot2 提供了一些利于印刷的 (typography-centric) 主题、标度、调色板和字体。 theme_ipsum() 是 hrbrthemes 中的核心主题(“ipsum” 在拉丁语中意为 “precise”)，使用了较为紧凑的 Arial Narrow 字体，调整了坐标轴标题的位置，和简洁的背景设置。 library(hrbrthemes) library(patchwork) 11.1 主题 p1 &lt;- ggplot(mtcars, aes(mpg, wt)) + geom_point() + labs(x=&quot;Fuel efficiency (mpg)&quot;, y=&quot;Weight (tons)&quot;, title=&quot;Seminal ggplot2 scatterplot example&quot;, subtitle=&quot;A plot&quot;, caption=&quot;Brought to you by the letter &#39;g&#39;&quot;) p2 &lt;- ggplot(mtcars, aes(mpg, wt)) + geom_point() + labs(x=&quot;Fuel efficiency (mpg)&quot;, y=&quot;Weight (tons)&quot;, title=&quot;Seminal ggplot2 scatterplot example&quot;, subtitle=&quot;A plot&quot;, caption=&quot;Brought to you by the letter &#39;g&#39;&quot;) + theme_ipsum() p1 + p2 Figure 11.1: theme_grey vs. theme_ipsum theme_ipsum 有几个变体，主要区别在字体和背景颜色上： theme_ipsum_es: Ccon Sans Condensed theme_ipsum_rc: Roboto Condensed theme_ipsum_ps: IBM Plex Sans font theme_ipsum_pub: Public Sans theme_ipsum_tw: Titilium Web theme_modern_rc: Roboto Condensed dark theme(暗色) theme_ft_rc: Dark theme based on FT’s dark theme (Roboto Condensed, 暗色) Roboto Condensed ggplot(mtcars, aes(mpg, wt)) + geom_point() + labs(x=&quot;Fuel efficiency (mpg)&quot;, y=&quot;Weight (tons)&quot;, title=&quot;Seminal ggplot2 scatterplot example&quot;, subtitle=&quot;A plot that is only useful for demonstration purposes&quot;, caption=&quot;Brought to you by the letter &#39;g&#39;&quot;) + theme_ipsum_rc() FT Theme ggplot(mtcars, aes(mpg, wt)) + geom_point(color = ft_cols$yellow) + labs(x=&quot;Fuel efficiency (mpg)&quot;, y=&quot;Weight (tons)&quot;, title=&quot;Seminal ggplot2 scatterplot example&quot;, subtitle=&quot;A plot that is only useful for demonstration purposes&quot;, caption=&quot;Brought to you by the letter &#39;g&#39;&quot;) + theme_ft_rc() 11.2 标度 颜色和填充色标度： scale_color_ipsum、scale_fill_ipsum ggplot(mtcars, aes(mpg, wt)) + geom_point(aes(color = factor(cyl))) + labs(x = &quot;Fuel efficiency (mpg)&quot;, y = &quot;Weight (tons)&quot;, title=&quot;Seminal ggplot2 scatterplot example&quot;, subtitle=&quot;A plot that is only useful for demonstration purposes&quot;, caption=&quot;Brought to you by the letter &#39;g&#39;&quot;) + scale_color_ipsum() + theme_ipsum_rc() mean_lifeExp &lt;- gapminder::gapminder %&gt;% group_by(continent) %&gt;% summarize(mean = mean(lifeExp, na.rm = T)) mean_lifeExp %&gt;% ggplot(aes(fct_reorder(continent, mean), mean)) + geom_col(aes(fill = continent)) + scale_fill_ipsum() + scale_y_continuous(limits = c(0, 80)) + labs(x = &quot;Contient&quot;, y = &quot;Mean Life Expectancy&quot;, title = &quot;Mean Life Expactancy across Continents&quot;) + theme_ipsum(grid = &quot;Y&quot;) 坐标轴标度： scale_x/y_percent、scale_x/y_comma 涉及数据量级较大时，percent 标度添加千分位标记法： count(mpg, class) %&gt;% mutate(n = n * 2000) %&gt;% arrange(n) %&gt;% mutate(class=factor(class, levels=class)) %&gt;% ggplot(aes(class, n)) + geom_col() + geom_text(aes(label=scales::comma(n)), hjust=0, nudge_y=2000) + scale_y_comma(limits=c(0,150000)) + coord_flip() + labs(x=&quot;Fuel efficiency (mpg)&quot;, y=&quot;Weight (tons)&quot;, title=&quot;Seminal ggplot2 column chart example with commas&quot;, subtitle=&quot;A plot that is only useful for demonstration purposes, esp since you&#39;d never\\nreally want direct labels and axis labels&quot;, caption=&quot;Brought to you by the letter &#39;g&#39;&quot;) + theme_ipsum_rc(grid=&quot;X&quot;) 在百分比面积图、条形图中，常采用的一个变换是 scale_y_continuous(labels = scales::percent)， scale_y_percent() 相当于是对这种设置的封装： uspopage &lt;- gcookbook::uspopage ggplot(uspopage, aes(Year, Thousands, fill = AgeGroup)) + geom_area(position = &quot;fill&quot;) + scale_fill_ipsum() + scale_x_continuous(expand=c(0,0)) + scale_y_percent() + labs(title=&quot;Age distribution of population in the U.S., 1900-2002&quot;, subtitle=&quot;Example data from the R Graphics Cookbook&quot;, caption=&quot;Source: R Graphics Cookbook&quot;) + theme_ipsum_rc(grid=&quot;XY&quot;) + theme(axis.text.x=element_text(hjust=c(0, 0.5, 0.5, 0.5, 1))) + theme(legend.position=&quot;bottom&quot;) "],
["ggthemr.html", "12 ggthemr 12.1 gallery 12.2 其他调用方式", " 12 ggthemr 参考： https://github.com/cttobin/ggthemr # devtools::install_github(&#39;cttobin/ggthemr&#39;) library(ggthemr) library(patchwork) library(gapminder) ggthemr 中主题的调用方式： ggthemr(&#39;name_of_theme&#39;) 运行后，再创建 ggplot 对象，其主题样式将变为 name_of_theme 所指定的那样，包括： 各种调色板 坐标轴、网格线的布局 元素之间的间距 字体大小 ggthemr 背后的运行机制： ggplot2::theme_set() 设置默认主题 ggplot2::update_geom_defaults() 修改各种几何对象中 aesthetics 的默认值 在全局环境中创建各种标度函数 ggthemr_reset() 重置为 ggplot 默认主题 theme_gray() swatch() 查看当前 ggthemr 主题的调色板： ggthemr(&quot;sky&quot;) swatch() #&gt; [1] &quot;#59595c&quot; &quot;#739EAB&quot; &quot;#2C3639&quot; &quot;#36555E&quot; &quot;#f99e93&quot; &quot;#c43d31&quot; #&gt; attr(,&quot;class&quot;) #&gt; [1] &quot;ggthemr_swatch&quot; ggthemr_reset() 12.1 gallery # prepare data and plot gapminder_sub &lt;- gapminder %&gt;% filter(country %in% c(&quot;China&quot;, &quot;India&quot;)) drivers &lt;- Seatbelts %&gt;% as_tibble() %&gt;% mutate(year = factor(rep(1969:1984, each = 12))) p1 &lt;- ggplot(gapminder_sub, aes(year, pop, color = country)) + geom_line(show.legend = F) + geom_point(show.legend = F) p2 &lt;- ggplot(mtcars %&gt;% mutate(cyl = factor(cyl)), aes(mpg, fill = cyl, color = cyl)) + geom_density(show.legend = F) p3 &lt;- ggplot(gapminder %&gt;% filter(continent %in% c(&quot;Asia&quot;, &quot;Africa&quot;)) ,aes(lifeExp, fill = continent)) + geom_histogram(show.legend = F) p4 &lt;- ggplot(drivers, aes(year, DriversKilled)) + geom_boxplot(show.legend = F) + scale_x_discrete(breaks = seq(1969, 1984, 3), label = function(x) paste0(&quot;&#39;&quot;, str_sub(x, 3, 4))) (p1 + p2) / (p3 + p4) Figure 12.1: gglot2 default theme ggthemr(&quot;flat&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;flat dark&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;camoflauge&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;chalk&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;copper&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;dust&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;earth&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;fresh&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;grape&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;grass&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;greyscale&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;light&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;lilac&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;pale&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;sea&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;sky&quot;) (p1 + p2) / (p3 + p4) ggthemr(&quot;solarized&quot;) (p1 + p2) / (p3 + p4) ggthemr() 还有一个参数 type = c(\"inner\", \"outer\") 控制背景色只占据绘图区还是整个图表： ggthemr(&quot;solarized&quot;, type = &quot;outer&quot;) (p1 + p2) / (p3 + p4) ggthemr_reset() 12.2 其他调用方式 如果不喜欢 ggthemr() 这种主题调用方式，还可以使用 + 这样的 ggplot2 叠加语法设置主题。 在 ggthemr() 中设置 set_theme = F，避免直接修改原默认值。此时函数返回一个列表: fresh_theme &lt;- ggthemr(&quot;fresh&quot;, set_theme = F) names(fresh_theme) #&gt; [1] &quot;theme&quot; &quot;geom_defaults&quot; &quot;scales&quot; &quot;palette&quot; #&gt; [5] &quot;layout&quot; &quot;text_size&quot; &quot;spacing&quot; &quot;type&quot; 这里主要使用 `theme 和scales` 两个元素 p3 + fresh_theme$theme + fresh_theme$scales$scale_fill_discrete() "],
["ggtech.html", "13 ggtech", " 13 ggtech # 安装 # devtools::install_github(&quot;ricardo-bion/ggtech&quot;, dependencies=TRUE) library(ggtech) 参考：https://github.com/ricardo-bion/ggtech ggtech 提供了 Facebook、google、twitter、etsy、23andme 几家科技公司的配色标度和主题设置，使用之前，需要先下载一些字体 https://github.com/ricardo-bion/ggtech#install-fonts 在 theme_tech(theme) 中选用主题，在 scale_fill_tech(theme) 和 scale_color_tech(theme) 中设置颜色标度。 p &lt;- ggplot(diamonds %&gt;% filter(color %in% LETTERS[4:7]), aes(carat)) + geom_histogram(aes(fill = color)) p + theme_tech(theme=&quot;etsy&quot;) + scale_fill_tech(theme=&quot;etsy&quot;) + labs(title=&quot;Etsy theme&quot;, subtitle=&quot;now with subtitles for ggplot2 &gt;= 2.1.0&quot;) p + theme_tech(theme=&quot;facebook&quot;) + scale_fill_tech(theme=&quot;facebook&quot;) + labs(title=&quot;Facebook theme&quot;, subtitle=&quot;now with subtitles for ggplot2 &gt;= 2.1.0&quot;) p + theme_tech(theme=&quot;google&quot;) + scale_fill_tech(theme=&quot;google&quot;) + labs(title=&quot;Google theme&quot;, subtitle=&quot;now with subtitles for ggplot2 &gt;= 2.1.0&quot;) p + theme_tech(theme=&quot;twitter&quot;) + scale_fill_tech(theme=&quot;twitter&quot;) + labs(title=&quot;Twitter theme&quot;, subtitle=&quot;now with subtitles for ggplot2 &gt;= 2.1.0&quot;) "],
["schizophrenia-births-in-australia.html", "14 Schizophrenia Births in Australia", " 14 Schizophrenia Births in Australia library(viridis) library(season) library(gridExtra) pa &lt;- ggplot(schz, aes(year, month, fill = SczBroad)) + geom_tile(color = &quot;gray20&quot;, size = 1.5, stat = &quot;identity&quot;) + scale_fill_viridis(option = &quot;A&quot;) + scale_y_continuous(breaks = 1:12, labels = month.abb[1:12])+ xlab(&quot;&quot;) + ylab(&quot;&quot;) + ggtitle(&quot;Total Australian Schizophrenics Born By Month and Year&quot;) + theme( plot.title = element_text(color=&quot;white&quot;,hjust=0,vjust=1, size=rel(2)), plot.background = element_rect(fill=&quot;gray20&quot;), panel.background = element_rect(fill=&quot;gray20&quot;), panel.border = element_rect(fill=NA,color=&quot;gray20&quot;, size=0.5, linetype=&quot;solid&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank(), axis.ticks = element_blank(), axis.text = element_text(color=&quot;white&quot;, size=rel(1.5)), axis.text.y = element_text(hjust=1), legend.text = element_text(color=&quot;white&quot;, size=rel(1.3)), legend.background = element_rect(fill=&quot;gray20&quot;), legend.position = &quot;bottom&quot;, legend.title=element_blank() ) "],
["Econmist.html", "15 经济学人：Corruption and human development", " 15 经济学人：Corruption and human development 来源：ggplot2 workshop by Harvad University 目标： 数据： data\\EconomistData.csv corruption &lt;- read_csv(&quot;data\\\\EconomistData.csv&quot;) corruption #&gt; # A tibble: 173 x 5 #&gt; Country HDI.Rank HDI CPI Region #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 Afghanistan 172 0.398 1.5 Asia Pacific #&gt; 2 Albania 70 0.739 3.1 East EU Cemt Asia #&gt; 3 Algeria 96 0.698 2.9 MENA #&gt; 4 Angola 148 0.486 2 SSA #&gt; 5 Argentina 45 0.797 3 Americas #&gt; 6 Armenia 86 0.716 2.6 East EU Cemt Asia #&gt; # ... with 167 more rows ## 基本对象 pc1 &lt;- ggplot(corruption,aes(CPI, HDI, color = Region)) pc1 + geom_point() 任务： 添加一条趋势线 改变点的形状和大小 改变因子Region的顺序和标签 为部分点打上数据标签 修饰坐标轴：标题，标签、刻度等 把颜色图例的位置移到图的上部 添加注解: 判定系数(R^2)和来源信息 首先添加趋势线，注意这里将geom_smooth()图层放在散点图的上方 ； 在formula中指定回归方程 pc2 &lt;- pc1 + geom_smooth(mapping = aes(linetype = &quot;r2&quot;), method = &quot;lm&quot;, formula = y ~ x + log(x), se = FALSE, color = &quot;red&quot;) pc2 + geom_point() 改变点的形状，这里使用shape=1,size=2.5: pc2 + geom_point(shape = 1, size = 4) 和原图比对，原图的数据点边框更厚，边框内部更小。于是这里还要使 用geom_point() 中一个不太常见的参数stroke，用来控制点的边框的厚度(point border thickness)，并相应地减小size： (pc3 &lt;- pc2 + geom_point(shape = 1, size = 2.5, stroke = 1.25)) 到这一步对数据点本身的修饰就基本结束了，可以把geom_point()图层也添加到基本对象中 下一步是部分数据点添加数据标签，使用 geom_text_repel() 以避免重叠，设置force = 10控制标签移动的幅度。只为部分点添加标签的方法在散点图那一章有涉及到，那里我们创建了一个新列用于添加标签，部分观测的标签被ifelse()设置为空字符串。但是这里使用了更巧妙的办法，直接更改geom_text()图层用到的数据： pointsToLabel &lt;- c(&quot;Russia&quot;, &quot;Venezuela&quot;, &quot;Iraq&quot;, &quot;Myanmar&quot;, &quot;Sudan&quot;, &quot;Afghanistan&quot;, &quot;Congo&quot;, &quot;Greece&quot;, &quot;Argentina&quot;, &quot;Brazil&quot;, &quot;India&quot;, &quot;Italy&quot;, &quot;China&quot;, &quot;South Africa&quot;, &quot;Spane&quot;, &quot;Botswana&quot;, &quot;Cape Verde&quot;, &quot;Bhutan&quot;, &quot;Rwanda&quot;, &quot;France&quot;, &quot;United States&quot;, &quot;Germany&quot;, &quot;Britain&quot;, &quot;Barbados&quot;, &quot;Norway&quot;, &quot;Japan&quot;, &quot;New Zealand&quot;, &quot;Singapore&quot;) library(ggrepel) (pc4 &lt;- pc3 + geom_text_repel(aes(label = Country), color=&quot;grey20&quot;, data = filter(corruption, Country %in% pointsToLabel), force = 10)) 下一步是改变 Region 的排序和标签，原数据中 Region 是以字符串存储的，这里先要把它变成因子： corruption$Region &lt;- factor(corruption$Region, levels = c(&quot;EU W. Europe&quot;, &quot;Americas&quot;, &quot;Asia Pacific&quot;, &quot;East EU Cemt Asia&quot;, &quot;MENA&quot;, &quot;SSA&quot;)) pc4 修饰坐标轴：设置标题、刻度和限度 添加主标题(title) 添加来源说明(caption) (pc5 &lt;- pc4 + scale_x_continuous(name = &quot;Corruption Perceptions Index, 2011 (10=least corrupt)&quot;, limits = c(.9, 10.5), breaks = 1:10) + scale_y_continuous(name = &quot;Human Development Index, 2011 (1=Best)&quot;, limits = c(0.2, 1.0), breaks = seq(0.2, 1.0, by = 0.1)) + labs(title=&quot;Corruption and Human Development&quot;, caption=&quot;Sources: Transparency International; UN Human Development Report&quot;)) 主题修饰： library(grid) # for the &#39;unit&#39; function (pc6 &lt;- pc5 + theme_bw() + theme(panel.border = element_blank(), ## 取消四周的边框线 panel.grid = element_blank(), panel.grid.major.y = element_line(color = &quot;gray&quot;), text = element_text(color = &quot;gray20&quot;), axis.title.x = element_text(face = &quot;italic&quot;), axis.title.y = element_text(face = &quot;italic&quot;), legend.position = &quot;top&quot;, ## 调整图例的位置和朝向 legend.direction = &quot;horizontal&quot;, legend.box = &quot;horizontal&quot;, legend.text = element_text(size = 8), plot.caption = element_text(hjust = 0), plot.title = element_text(size = 16, face = &quot;bold&quot;)) ) 颜色标度调整，并且把图例变为一行 ； 更改图例的标签 ； (pc7 &lt;- pc6 + scale_color_manual(name = &quot;&quot;, values = c(&quot;#24576D&quot;, &quot;#099DD7&quot;, &quot;#28AADC&quot;, &quot;#248E84&quot;, &quot;#F2583F&quot;, &quot;#96503F&quot;), labels=c(&quot;OECD&quot;, &quot;Americas&quot;, &quot;Asia &amp;\\nOceania&quot;, &quot;Central &amp;\\nEastern Europe&quot;, &quot;Middle East &amp;\\nnorth Africa&quot;, &quot;Sub-Saharan\\nAfrica&quot;), guide=guide_legend(nrow=1))) 计算模型的 \\(R^2\\) 系数 mR2 &lt;- summary(lm(HDI ~ CPI + log(CPI), data = corruption))$r.squared mR2 &lt;- paste0(format(mR2, digits = 2), &quot;%&quot;) 下面把它添加到图形中，annotate()函数并不擅长把注解添加到绘图区域以外的地方；不过我们早有准备，这里实际上是要把linetype图例中的labels设定为判定系数： pc8 &lt;- pc7 + scale_linetype(name = &quot;&quot;, ## 图例的名字 labels = list(bquote(R^2==.(mR2))), guide = guide_legend(override.aes = list(linetype = 1, size = 2, color = &quot;red&quot;), order = 2)) pc8 "]
]
