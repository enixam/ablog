<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization | Qiushi Yan</title>
    <link>/categories/data-visualization/</link>
      <atom:link href="/categories/data-visualization/index.xml" rel="self" type="application/rss+xml" />
    <description>Data Visualization</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Qiushi Yan © 2020</copyright><lastBuildDate>Fri, 29 Nov 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Data Visualization</title>
      <link>/categories/data-visualization/</link>
    </image>
    
    <item>
      <title>Reordering within facets</title>
      <link>/post/reorder-varible-within-facets/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/reorder-varible-within-facets/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#common-words-in-jane-austens-books&#34;&gt;Common words in Jane Austen’s books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#helper-functions-for-reordering&#34;&gt;Helper functions for reordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;This blog post is inspired by Julia Silge’s &lt;a href=&#34;https://juliasilge.com/blog/reorder-within/&#34;&gt;Reordering and facetting for ggplot2&lt;/a&gt;. By reproducing the original post using another different dataset, I hope this could still shed some light on a handful of ggplot2 tips.&lt;/p&gt;
&lt;div id=&#34;common-words-in-jane-austens-books&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Common words in Jane Austen’s books&lt;/h1&gt;
&lt;p&gt;Here is a simple task: we want to find the top-10 most common words in several Jane Austen’s books, draw a bar graph, and then put them into different facets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(tidytext)
library(janeaustenr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we use &lt;code&gt;unnest_tokens&lt;/code&gt; from the &lt;code&gt;tidytext&lt;/code&gt; package &lt;span class=&#34;citation&#34;&gt;(Robinson and Silge &lt;a href=&#34;#ref-R-tidytext&#34; role=&#34;doc-biblioref&#34;&gt;2019&lt;/a&gt;)&lt;/span&gt; to break the text into individual tokens and transform it into a tidy structure:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# calculate 10 most common words in each book
common_words &amp;lt;- austen_books() %&amp;gt;%
  unnest_tokens(word, text) %&amp;gt;% 
  anti_join(stop_words) %&amp;gt;% 
  count(book, word) %&amp;gt;% 
  group_by(book) %&amp;gt;% 
  top_n(10)

common_words
#&amp;gt; # A tibble: 60 x 3
#&amp;gt; # Groups:   book [6]
#&amp;gt;    book                word           n
#&amp;gt;    &amp;lt;fct&amp;gt;               &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
#&amp;gt;  1 Sense &amp;amp; Sensibility dashwood     231
#&amp;gt;  2 Sense &amp;amp; Sensibility edward       220
#&amp;gt;  3 Sense &amp;amp; Sensibility elinor       623
#&amp;gt;  4 Sense &amp;amp; Sensibility jennings     199
#&amp;gt;  5 Sense &amp;amp; Sensibility marianne     492
#&amp;gt;  6 Sense &amp;amp; Sensibility miss         210
#&amp;gt;  7 Sense &amp;amp; Sensibility mother       213
#&amp;gt;  8 Sense &amp;amp; Sensibility sister       229
#&amp;gt;  9 Sense &amp;amp; Sensibility time         239
#&amp;gt; 10 Sense &amp;amp; Sensibility willoughby   181
#&amp;gt; # ... with 50 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For details many and other useful text mining techniques in R, I recommend reading &lt;a href=&#34;Text%20Mining%20with%20R:%20A%20tidy%20approach&#34;&gt;Text mining with R: A tidy approach&lt;/a&gt; by Julia Silge and David Robinson&lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-silge2017text&#34; role=&#34;doc-biblioref&#34;&gt;2017&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;common_words %&amp;gt;% 
  ggplot(aes(y = word, 
             x = n, 
             fill = book)) +
  geom_col(show.legend = FALSE) + 
  facet_wrap(~ book, ncol = 2, scales = &amp;quot;free_y&amp;quot;) + 
  theme(axis.text.y = element_text(size = 12),
        axis.text.x = element_text(size = 14)) +
  rcartocolor::scale_fill_carto_d(palette = &amp;quot;PurpOr&amp;quot;) + 
  labs(title = &amp;quot;Top 10 commono words in Jane Austen&amp;#39;s novels, default ordering&amp;quot;,
       y = NULL,
       x = &amp;quot;# of words&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/reorder-varible-within-facets/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;
(&lt;strong&gt;Reminder&lt;/strong&gt;: don’t forget &lt;code&gt;scales = &#34;free_y&#34;&lt;/code&gt; or &lt;code&gt;scales = &#34;free&#34;&lt;/code&gt; in this case.)&lt;/p&gt;
&lt;p&gt;By default, ggplot2 order y lables alphabetically, because they are of type character. One common solution is to use &lt;code&gt;fct_reorder()&lt;/code&gt; or its equivalent &lt;code&gt;reorder()&lt;/code&gt; in baes R`:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;common_words %&amp;gt;% 
  ggplot(aes(y = fct_reorder(word, n), 
             x = n, 
             fill = book)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ book, ncol = 2, scales = &amp;quot;free_y&amp;quot;) + 
  theme(axis.text.y = element_text(size = 12),
        axis.text.x = element_text(size = 14)) +
  rcartocolor::scale_fill_carto_d(palette = &amp;quot;PurpOr&amp;quot;) + 
  labs(y = NULL,
       title = &amp;quot;fct_reorder() on y&amp;quot;,
       x = &amp;quot;# of words&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/reorder-varible-within-facets/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well, our plot improve a bit, but is still wanting in some respects. In each facet, the order of words is not strictly in line with its frequency. In fact, &lt;code&gt;fct_reorder&lt;/code&gt; or &lt;code&gt;reorder&lt;/code&gt; only reorder all of these together, meaning that &lt;code&gt;word&lt;/code&gt; are reordered in an overall level so that it cannot guarantee order in any specific subset of data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;helper-functions-for-reordering&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Helper functions for reordering&lt;/h1&gt;
&lt;p&gt;tidytext provides 2 helper functions to reorder a variable on a facet level.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reorder_within()&lt;/code&gt; takes three arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: the item we want to reorder&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;by&lt;/code&gt;: what we want to reorder by&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;within&lt;/code&gt;: the groups or categories we want to reorder within&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, we use &lt;code&gt;scale_x_reordered()&lt;/code&gt;(or &lt;code&gt;scale_y_reordered()&lt;/code&gt;) to finish the plot, these 2 scales can take any argument in common scale functions(e.g., &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;expand&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here is the final plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# reorder word by n, within each book
common_words %&amp;gt;% 
  ggplot(aes(y = reorder_within(word, n, book), 
             x = n, 
             fill = book)) +
  geom_col(show.legend = FALSE) + 
  scale_y_reordered() + 
  facet_wrap(~ book, ncol = 2, scales = &amp;quot;free_y&amp;quot;) + 
  theme(axis.text.y = element_text(size = 12),
        axis.text.x = element_text(size = 14)) +
  rcartocolor::scale_fill_carto_d(palette = &amp;quot;PurpOr&amp;quot;) +
  labs(title = &amp;quot;Reordering with {ggtext} graph helpers&amp;quot;,
       x = &amp;quot;# of words&amp;quot;,
       y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/reorder-varible-within-facets/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Without &lt;code&gt;scale_y_reordered&lt;/code&gt; which overides ggplot2’s default scale, the label of the reordered variable will carry a suffix related to the group variable, making lables way too long and uninformative.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;common_words %&amp;gt;% 
  ggplot(aes(y = reorder_within(word, n, book), 
             x = n, 
             fill = book)) +
  geom_col(show.legend = FALSE) + 
  facet_wrap(~ book, ncol = 2, scales = &amp;quot;free_y&amp;quot;) + 
  theme(axis.text.y = element_text(size = 12),
        axis.text.x = element_text(size = 14)) +
  rcartocolor::scale_fill_carto_d(palette = &amp;quot;PurpOr&amp;quot;) +
  labs(title = &amp;quot;Without scale_y_reordered()&amp;quot;,
       x = &amp;quot;# of words&amp;quot;,
       y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/reorder-varible-within-facets/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;Nowosad, J. (2018). ‘CARTOColors’ Palettes. R package version 1.0.0. &lt;a href=&#34;https://nowosad.github.io/rcartocolor&#34; class=&#34;uri&#34;&gt;https://nowosad.github.io/rcartocolor&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-R-tidytext&#34;&gt;
&lt;p&gt;Robinson, David, and Julia Silge. 2019. &lt;em&gt;Tidytext: Text Mining Using ’Dplyr’, ’Ggplot2’, and Other Tidy Tools&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=tidytext&#34;&gt;https://CRAN.R-project.org/package=tidytext&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-silge2017text&#34;&gt;
&lt;p&gt;Silge, Julia, and David Robinson. 2017. &lt;em&gt;Text Mining with R: A Tidy Approach&lt;/em&gt;. &#34; O’Reilly Media, Inc.&#34;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
