<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning | Qiushi Yan</title>
    <link>https://qiushi.rbind.io/categories/machine-learning/</link>
      <atom:link href="https://qiushi.rbind.io/categories/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>Machine Learning</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Qiushi Yan © 2021</copyright><lastBuildDate>Thu, 07 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://qiushi.rbind.io/img/icon-192.png</url>
      <title>Machine Learning</title>
      <link>https://qiushi.rbind.io/categories/machine-learning/</link>
    </image>
    
    <item>
      <title>Analyzing Animal Crossing Reviews</title>
      <link>https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      <guid>https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#eda-and-data-cleaning&#34;&gt;EDA and data cleaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#text-analysis-of-user-reviews&#34;&gt;Text analysis of user reviews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#predictive-modeling-for-rating&#34;&gt;Predictive modeling for rating&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;In this post I analyzed reviews for the life simulation video game, Animal Crossing. The data came from &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-05-05/readme.md&#34;&gt;this weeks’s &lt;code&gt;#TidyTuesday&lt;/code&gt;&lt;/a&gt;, scraped from &lt;a href=&#34;https://github.com/jefflomacy/villagerdb&#34;&gt;VillagerDB&lt;/a&gt; and &lt;a href=&#34;https://www.metacritic.com/game/switch/animal-crossing-new-horizons/critic-reviews&#34;&gt;Metacritic&lt;/a&gt;. I used only the &lt;code&gt;reviews&lt;/code&gt; table, but there are a lot more to analyze such as characters and items in the game.&lt;/p&gt;
&lt;p&gt;The data appeared a bit messy after some EDA, and regular expressions played a major role in data cleaning. After that I made some plots concerning the review text, such as common words or high score words from an algorithm. Highly correlated words in user reviews were shown with nodes and edges. Then I built a multicategory logit model to predict ratings (low, medium or high) with predictors including the reviewing date and usage of specific words.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(tidytext)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;eda-and-data-cleaning&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;EDA and data cleaning&lt;/h1&gt;
&lt;p&gt;The reviews data contains four columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grade&lt;/code&gt;: 0-100 score given by the critic (missing for some) where higher score = better.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user_name&lt;/code&gt;: user name of the reviewer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;: review of the reviewer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;: when the review is published&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews &amp;lt;- readr::read_tsv(&amp;quot;D:/RProjects/data/blog/animal-crossing-reviews.tsv&amp;quot;)
glimpse(reviews)
#&amp;gt; Rows: 1,473
#&amp;gt; Columns: 4
#&amp;gt; $ grade     &amp;lt;dbl&amp;gt; 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, ...
#&amp;gt; $ user_name &amp;lt;chr&amp;gt; &amp;quot;mds27272&amp;quot;, &amp;quot;lolo2178&amp;quot;, &amp;quot;Roachant&amp;quot;, &amp;quot;Houndf&amp;quot;, &amp;quot;ProfessorF...
#&amp;gt; $ text      &amp;lt;chr&amp;gt; &amp;quot;My gf started playing before me. No option to create my ...
#&amp;gt; $ date      &amp;lt;date&amp;gt; 2020-03-20, 2020-03-20, 2020-03-20, 2020-03-20, 2020-03-...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A bar plot of all grades show a bimodal distribution. This is perhaps not that astonishing when it comes to reviewing, since people tend to go to extremes and give polarized opinions. This may suggest that we cut &lt;code&gt;grades&lt;/code&gt; into discrete levels and build a classification model afterwards, rather than modeling bare grades itself with regression models.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews %&amp;gt;% 
  count(grade) %&amp;gt;% 
  ggplot() + 
  geom_col(aes(x = factor(grade), 
               y = n),
           fill = &amp;quot;midnightblue&amp;quot;, alpha = 0.6) + 
  labs(x = &amp;quot;grade&amp;quot;, y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The data is messy in several ways (I have chosen 3 observations from the &lt;code&gt;text&lt;/code&gt; column for example):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Review contains repetition. the following review where the first 4.5 lines are repeated in the following lines&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“While the game itself is great, really relaxing and gorgeous, i can’t ignore one thing that ruins the whole experience for me and a lot of other people as seen by the different user reviews.That thing is that you only have 1 island per console. This decision limits to one person being able to enjoy the full experience. It also nukes any creative control of the island, since you haveWhile the game itself is great, really relaxing and gorgeous, i can’t ignore one thing that ruins the whole experience for me and a lot of other people as seen by the different user reviews.That thing is that you only have 1 island per console. This decision limits to one person being able to enjoy the full experience. It also nukes any creative control of the island, since you have the other usershouse and furniture. I hope nintendo can soon fix this big issue, because for now, this killed any intentions i had to play the game.… Expand”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Reviews that exceed certian length are incomplete and end with “Expand”. The following review also contains repeated lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“One island per console is a design decision that is, at best, in poor taste, and at worst, straight-up predatory behavior.Per console, only one player gets to experience the game at its fullest. The other players see less dialogue, experience less events, and are locked out entirely from certain parts of the game.No matter how good a game is, I cannot stand behind a company thatOne island per console is a design decision that is, at best, in poor taste, and at worst, straight-up predatory behavior.Per console, only one player gets to experience the game at its fullest. The other players see less dialogue, experience less events, and are locked out entirely from certain parts of the game.No matter how good a game is, I cannot stand behind a company that sees fit to make such decisions.… Expand”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;non-English reviews&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“Una sola isla , es un asco . No puedes seguir avanzando, solo te queda recoger madera”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I use regular expressions to remove repeated lines as well as “Expand” at the end. Repetitions happen when the review is long, and the repetition part often takes up 4 to 5 lines (here I use 350 or more characters to indicate the repetition part).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clr::detect_language&lt;/code&gt; is used to exclude non-English text. This a R wrapper around Google’s Compact Language Detector 3, a neural network model for language identification. There will be misclassifications, though. As the proportion of exclusion is fairly low, we’re OK. Lastyly, et’s split &lt;code&gt;grade&lt;/code&gt; 3 ordered categories, low, medium and high.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cld3)

# most text are detected as English
reviews %&amp;gt;% 
  mutate(language = detect_language(text)) %&amp;gt;% 
  count(language, sort = TRUE)
#&amp;gt; # A tibble: 11 x 2
#&amp;gt;    language     n
#&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;
#&amp;gt;  1 en        1394
#&amp;gt;  2 es          48
#&amp;gt;  3 ru           7
#&amp;gt;  4 it           6
#&amp;gt;  5 fr           5
#&amp;gt;  6 pt           5
#&amp;gt;  7 de           3
#&amp;gt;  8 &amp;lt;NA&amp;gt;         2
#&amp;gt;  9 ja           1
#&amp;gt; 10 pl           1
#&amp;gt; 11 th           1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews_en &amp;lt;- reviews %&amp;gt;% 
  filter(detect_language(text) == &amp;quot;en&amp;quot;)


repetition_clean &amp;lt;- reviews_en %&amp;gt;% 
  filter(str_detect(text, &amp;quot;(.{350,})\\1.+&amp;quot;)) %&amp;gt;% 
  mutate(text = str_replace(text, &amp;quot;(.{350,})\\1(.+)Expand$&amp;quot;, &amp;quot;\\1\\2&amp;quot;))

reviews_clean &amp;lt;- anti_join(reviews_en, repetition_clean, 
                           by = c(&amp;quot;user_name&amp;quot; = &amp;quot;user_name&amp;quot;)) %&amp;gt;% 
  bind_rows(repetition_clean) %&amp;gt;% 
  mutate(rating = case_when(
    grade &amp;lt;= 2 ~ &amp;quot;low&amp;quot;,
    grade &amp;gt; 2 &amp;amp; grade &amp;lt; 8 ~ &amp;quot;medium&amp;quot;,
    grade &amp;gt;= 8 ~ &amp;quot;high&amp;quot;,
  ) %&amp;gt;% factor(levels = c(&amp;quot;low&amp;quot;, &amp;quot;medium&amp;quot;, &amp;quot;high&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;rating&lt;/code&gt; is a factor with 3 levels. Low and high ratings are rougly the same size, and medium ratings are relatively rare.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews_clean %&amp;gt;% 
  count(rating)
#&amp;gt; # A tibble: 3 x 2
#&amp;gt;   rating     n
#&amp;gt;   &amp;lt;fct&amp;gt;  &amp;lt;int&amp;gt;
#&amp;gt; 1 low      626
#&amp;gt; 2 medium   136
#&amp;gt; 3 high     632&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can examine how this cleaning process works by comparing the distribution of review length, before and after. The cleaning should reduce the amount of medium long and long reviews, in exchange for shorter ones.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;reviews %&amp;gt;%
  transmute(length = str_length(text),
            type = &amp;quot;before&amp;quot;) %&amp;gt;% 
  bind_rows(reviews_clean %&amp;gt;%
              transmute(length = str_length(text), type = &amp;quot;after&amp;quot;)) %&amp;gt;%
  ggplot() + 
  geom_density(aes(length, fill = type), alpha = 0.2) + 
  scale_fill_discrete(name = NULL) + 
  labs(title = &amp;quot;Distribution of review length (characters) before and after cleaning&amp;quot;,
       x = NULL,
       y = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;text-analysis-of-user-reviews&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Text analysis of user reviews&lt;/h1&gt;
&lt;p&gt;Our text analysis begin by tokenizing review text to find out what are the most common words (by term frequency) for each category of reviews.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;words &amp;lt;- reviews_clean %&amp;gt;% 
  select(rating, text) %&amp;gt;% 
  unnest_tokens(word, text) %&amp;gt;% 
  anti_join(stop_words) %&amp;gt;% 
  filter(!str_detect(word, &amp;quot;^\\d+$&amp;quot;))
 

common_words &amp;lt;- words %&amp;gt;% 
  count(rating, word, sort = TRUE, name = &amp;quot;term_count&amp;quot;) %&amp;gt;% 
  add_count(rating, wt = term_count, name = &amp;quot;total_count&amp;quot;) %&amp;gt;% 
  mutate(term_freq = term_count / total_count)  %&amp;gt;% 
  group_by(rating) %&amp;gt;% 
  top_n(30, term_freq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(common_words, 
       aes(y = reorder_within(word, term_freq, rating),
           x = term_freq,
           fill = rating)) + 
  geom_col(show.legend = FALSE, alpha = 0.6) + 
  scale_y_reordered() + 
  scale_x_continuous(label = scales::label_percent()) + 
  nord::scale_fill_nord(palette = &amp;quot;afternoon_prarie&amp;quot;) +
  facet_wrap(~ rating, scales = &amp;quot;free_y&amp;quot;, strip.position = &amp;quot;bottom&amp;quot;) + 
  labs(title = &amp;quot;Most common words in different levels of reviews&amp;quot;,
       x = &amp;quot;term frequency&amp;quot;,
       y = NULL) + 
  hrbrthemes::theme_modern_rc() + 
  theme(panel.grid.major.y = element_blank(),
        plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = 28),
        plot.title.position = &amp;quot;plot&amp;quot;,
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 12),
        axis.title.x = element_text(size = 16), 
        strip.text = element_text(size = 20, color = &amp;quot;white&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;1344&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As it is, this plot aren’t that helpful for all categories share a very similar set of words. For this reason I turn to two other algorithms developed for information retrieval: tf-idf and weighted log odds.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidylo)

key_words &amp;lt;- words %&amp;gt;% 
  count(rating, word, sort = TRUE) %&amp;gt;% 
  bind_tf_idf(term = word, document = rating, n = n) %&amp;gt;%
  left_join(words %&amp;gt;% 
              count(rating, word, sort = TRUE) %&amp;gt;% 
              bind_log_odds(set = rating, feature = word, n = n),
            by = c(&amp;quot;rating&amp;quot; = &amp;quot;rating&amp;quot;, &amp;quot;word&amp;quot;, &amp;quot;word&amp;quot;, &amp;quot;n&amp;quot; = &amp;quot;n&amp;quot;)) %&amp;gt;% 
  select(rating, word, tf_idf, log_odds)

key_words
#&amp;gt; # A tibble: 9,162 x 4
#&amp;gt;    rating word     tf_idf log_odds
#&amp;gt;    &amp;lt;fct&amp;gt;  &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt;  1 low    game          0   -0.392
#&amp;gt;  2 high   game          0    1.25 
#&amp;gt;  3 low    island        0    3.60 
#&amp;gt;  4 low    switch        0    5.25 
#&amp;gt;  5 low    play          0    5.24 
#&amp;gt;  6 low    player        0    7.31 
#&amp;gt;  7 high   island        0   -3.44 
#&amp;gt;  8 low    nintendo      0    6.54 
#&amp;gt;  9 medium game          0   -0.882
#&amp;gt; 10 high   animal        0    7.55 
#&amp;gt; # ... with 9,152 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make separate plot for two measures and then combine them togther.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tf_idf &amp;lt;- key_words %&amp;gt;% 
  group_by(rating) %&amp;gt;% 
  arrange(-tf_idf) %&amp;gt;% 
  slice(1:20) %&amp;gt;% 
  ggplot(aes(
    y = reorder_within(word, tf_idf, rating),
    x = tf_idf,
    fill = rating)) + 
  geom_col(show.legend = FALSE, alpha = 0.6) + 
  scale_y_reordered() + 
  scale_x_continuous(position = &amp;quot;top&amp;quot;) + 
  nord::scale_fill_nord(palette = &amp;quot;afternoon_prarie&amp;quot;) +
  facet_wrap(~ rating, scales = &amp;quot;free_y&amp;quot;, strip.position = &amp;quot;bottom&amp;quot;) + 
  labs(title = &amp;quot;High tf-idf words&amp;quot;,
       x = NULL,
       y = NULL) + 
  hrbrthemes::theme_modern_rc() + 
  theme(panel.grid.major.y = element_blank(),
        plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = 28),
        plot.title.position = &amp;quot;plot&amp;quot;,
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 12),
        axis.title.x = element_text(size = 16), 
        strip.text = element_text(size = 24, color = &amp;quot;white&amp;quot;)) 

log_odds &amp;lt;- key_words %&amp;gt;% 
  group_by(rating) %&amp;gt;% 
  top_n(20, log_odds) %&amp;gt;%
  ggplot(aes(
    y = reorder_within(word, log_odds, rating),
    x = log_odds,
    fill = rating)) + 
  geom_col(show.legend = FALSE, alpha = 0.6) + 
  scale_y_reordered() + 
  scale_x_continuous(position = &amp;quot;top&amp;quot;) +  
  nord::scale_fill_nord(palette = &amp;quot;afternoon_prarie&amp;quot;) +
  facet_wrap(~ rating, scales = &amp;quot;free_y&amp;quot;, strip.position = &amp;quot;bottom&amp;quot;) + 
  labs(title = &amp;quot;High log-odds words&amp;quot;,
       x = NULL,
       y = NULL) + 
  hrbrthemes::theme_modern_rc() + 
  theme(panel.grid.major.y = element_blank(),
        plot.title = element_text(face = &amp;quot;bold&amp;quot;, size = 28),
        plot.title.position = &amp;quot;plot&amp;quot;,
        axis.text.y = element_text(size = 16),
        axis.text.x = element_text(size = 12),
        axis.title.x = element_text(size = 16), 
        strip.text = element_blank()) 

patchwork::wrap_plots(tf_idf, log_odds, nrow = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;1344&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Emmm… this is a little better, isn’t it 😅? The &lt;code&gt;tf_idf&lt;/code&gt; plot performed well in identifying characteristic words in low ratings like “unacceptable”, “wtf” and “boring”, While the &lt;code&gt;log_odds&lt;/code&gt; plo shows a somewhat dominance of words like “fun”, “cute” and “relaxing” in high ratings.&lt;/p&gt;
&lt;p&gt;Additionally, we may also be interested in words that tend to co-occur within a particular review. For simplicity I focus on long reivews only (more than 800 characters).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(widyr)

word_cors &amp;lt;- reviews_clean %&amp;gt;%  
  filter(str_length(text) &amp;gt; 800) %&amp;gt;%
  select(user_name, text) %&amp;gt;% 
  unnest_tokens(word, text) %&amp;gt;% 
  anti_join(stop_words) %&amp;gt;% 
  filter(!str_detect(word, &amp;quot;^\\d+$&amp;quot;)) %&amp;gt;% 
  group_by(word) %&amp;gt;% 
  filter(n() &amp;gt; 10) %&amp;gt;% 
  count(user_name, word) %&amp;gt;% 
  pairwise_cor(item = word, feature = user_name, value = n)

word_cors
#&amp;gt; # A tibble: 102,720 x 3
#&amp;gt;    item1      item2 correlation
#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;
#&amp;gt;  1 ability    3ds       -0.0402
#&amp;gt;  2 absolutely 3ds       -0.0125
#&amp;gt;  3 ac         3ds        0.158 
#&amp;gt;  4 access     3ds       -0.0457
#&amp;gt;  5 account    3ds        0.170 
#&amp;gt;  6 accounts   3ds        0.271 
#&amp;gt;  7 activities 3ds        0.0348
#&amp;gt;  8 add        3ds        0.0216
#&amp;gt;  9 addition   3ds        0.0770
#&amp;gt; 10 additional 3ds       -0.0414
#&amp;gt; # ... with 102,710 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggraph)
library(tidygraph)

word_cors %&amp;gt;%
  filter(correlation &amp;gt; 0.4) %&amp;gt;% 
  as_tbl_graph() %&amp;gt;% 
  ggraph(layout = &amp;quot;fr&amp;quot;) + 
  geom_edge_link(aes(alpha = correlation), show.legend = FALSE) + 
  geom_node_point(color = &amp;quot;lightblue&amp;quot;, size = 6.5) + 
  geom_node_text(aes(label = name), repel = TRUE, size = 5.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;predictive-modeling-for-rating&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predictive modeling for rating&lt;/h1&gt;
&lt;p&gt;It takes some steps to derive from &lt;code&gt;reviews_clean&lt;/code&gt; a design matrix for modeling. The &lt;a href=&#34;https://tidymodels.github.io/textrecipes/index.html&#34;&gt;&lt;code&gt;textrecipes&lt;/code&gt;&lt;/a&gt; package contains extra steps for &lt;code&gt;recipes&lt;/code&gt; for preprocessing text data that could have replaced my manual wrangling. But I havn’t digged into that now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lubridate)

model_df &amp;lt;- reviews_clean %&amp;gt;% 
  filter_all(all_vars(!is.na(.))) %&amp;gt;% 
  transmute(rating, 
            user_name, 
            text,
            t = as.numeric(date - ymd(&amp;quot;2020-03-20&amp;quot;))) %&amp;gt;%
  unnest_tokens(word, text) %&amp;gt;% 
  anti_join(stop_words) %&amp;gt;%
  count(user_name, t, rating, word, name = &amp;quot;word_count&amp;quot;) %&amp;gt;% 
  group_by(word) %&amp;gt;% 
  filter(n() &amp;gt; 20, word != &amp;quot;rating&amp;quot;, !str_detect(word, &amp;quot;^\\d+$&amp;quot;)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  pivot_wider(names_from = word, values_from = word_count, 
              values_fill = list(word_count = 0), names_repair = &amp;quot;minimal&amp;quot;)
  

model_df
#&amp;gt; # A tibble: 1,392 x 320
#&amp;gt;    user_name     t rating playing  stop ability accounts   buy `can’t` console
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;
#&amp;gt;  1 000PLAYE~     0 high         1     1       0        0     0       0       0
#&amp;gt;  2 11_11         4 low          1     0       1        3     2       1       2
#&amp;gt;  3 12hwilso      4 low          0     0       0        1     0       0       2
#&amp;gt;  4 3nd3r02       6 low          0     0       0        0     0       0       0
#&amp;gt;  5 425_Flex      3 low          0     0       0        0     0       0       0
#&amp;gt;  6 486eHyMy      2 low          0     0       0        0     0       0       0
#&amp;gt;  7 4Plants       5 high         0     0       0        0     0       0       0
#&amp;gt;  8 8bheotap~     6 low          0     0       0        0     0       0       2
#&amp;gt;  9 A_Mighty~     6 medium       3     0       0        1     3       0       0
#&amp;gt; 10 a0972354      4 high         0     0       0        0     0       0       0
#&amp;gt; # ... with 1,382 more rows, and 310 more variables: consoles &amp;lt;int&amp;gt;,
#&amp;gt; #   `don’t` &amp;lt;int&amp;gt;, excited &amp;lt;int&amp;gt;, extremely &amp;lt;int&amp;gt;, families &amp;lt;int&amp;gt;,
#&amp;gt; #   forcing &amp;lt;int&amp;gt;, fun &amp;lt;int&amp;gt;, game &amp;lt;int&amp;gt;, games &amp;lt;int&amp;gt;, greedy &amp;lt;int&amp;gt;,
#&amp;gt; #   household &amp;lt;int&amp;gt;, island &amp;lt;int&amp;gt;, money &amp;lt;int&amp;gt;, multiple &amp;lt;int&amp;gt;, nintendo &amp;lt;int&amp;gt;,
#&amp;gt; #   play &amp;lt;int&amp;gt;, purchase &amp;lt;int&amp;gt;, saves &amp;lt;int&amp;gt;, separate &amp;lt;int&amp;gt;, sister &amp;lt;int&amp;gt;,
#&amp;gt; #   spent &amp;lt;int&amp;gt;, stupid &amp;lt;int&amp;gt;, true &amp;lt;int&amp;gt;, account &amp;lt;int&amp;gt;, broken &amp;lt;int&amp;gt;,
#&amp;gt; #   fix &amp;lt;int&amp;gt;, people &amp;lt;int&amp;gt;, progress &amp;lt;int&amp;gt;, `1st` &amp;lt;int&amp;gt;, animal &amp;lt;int&amp;gt;,
#&amp;gt; #   crossing &amp;lt;int&amp;gt;, experience &amp;lt;int&amp;gt;, gorgeous &amp;lt;int&amp;gt;, idea &amp;lt;int&amp;gt;, love &amp;lt;int&amp;gt;,
#&amp;gt; #   makes &amp;lt;int&amp;gt;, player &amp;lt;int&amp;gt;, reason &amp;lt;int&amp;gt;, score &amp;lt;int&amp;gt;, worth &amp;lt;int&amp;gt;,
#&amp;gt; #   control &amp;lt;int&amp;gt;, family &amp;lt;int&amp;gt;, giving &amp;lt;int&amp;gt;, grab &amp;lt;int&amp;gt;, kids &amp;lt;int&amp;gt;,
#&amp;gt; #   negative &amp;lt;int&amp;gt;, resources &amp;lt;int&amp;gt;, review &amp;lt;int&amp;gt;, switch &amp;lt;int&amp;gt;,
#&amp;gt; #   unacceptable &amp;lt;int&amp;gt;, user &amp;lt;int&amp;gt;, users &amp;lt;int&amp;gt;, girlfriend &amp;lt;int&amp;gt;,
#&amp;gt; #   players &amp;lt;int&amp;gt;, time &amp;lt;int&amp;gt;, wait &amp;lt;int&amp;gt;, day &amp;lt;int&amp;gt;, horizons &amp;lt;int&amp;gt;,
#&amp;gt; #   house &amp;lt;int&amp;gt;, leaf &amp;lt;int&amp;gt;, past &amp;lt;int&amp;gt;, played &amp;lt;int&amp;gt;, view &amp;lt;int&amp;gt;,
#&amp;gt; #   allowing &amp;lt;int&amp;gt;, designed &amp;lt;int&amp;gt;, gamecube &amp;lt;int&amp;gt;, real &amp;lt;int&amp;gt;, single &amp;lt;int&amp;gt;,
#&amp;gt; #   version &amp;lt;int&amp;gt;, bought &amp;lt;int&amp;gt;, buying &amp;lt;int&amp;gt;, choice &amp;lt;int&amp;gt;, community &amp;lt;int&amp;gt;,
#&amp;gt; #   decision &amp;lt;int&amp;gt;, expected &amp;lt;int&amp;gt;, features &amp;lt;int&amp;gt;, feel &amp;lt;int&amp;gt;, feels &amp;lt;int&amp;gt;,
#&amp;gt; #   fine &amp;lt;int&amp;gt;, forced &amp;lt;int&amp;gt;, future &amp;lt;int&amp;gt;, gameplay &amp;lt;int&amp;gt;, huge &amp;lt;int&amp;gt;,
#&amp;gt; #   issue &amp;lt;int&amp;gt;, left &amp;lt;int&amp;gt;, lot &amp;lt;int&amp;gt;, mechanics &amp;lt;int&amp;gt;, multiplayer &amp;lt;int&amp;gt;,
#&amp;gt; #   op &amp;lt;int&amp;gt;, person &amp;lt;int&amp;gt;, plays &amp;lt;int&amp;gt;, reviews &amp;lt;int&amp;gt;, shame &amp;lt;int&amp;gt;,
#&amp;gt; #   sharing &amp;lt;int&amp;gt;, started &amp;lt;int&amp;gt;, system &amp;lt;int&amp;gt;, bombing &amp;lt;int&amp;gt;, dont &amp;lt;int&amp;gt;,
#&amp;gt; #   hate &amp;lt;int&amp;gt;, islands &amp;lt;int&amp;gt;, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After tokenizing, filtering and some other steps, I have a ready-for-modeling design matrix at hand. &lt;code&gt;user_name&lt;/code&gt; is an ID variable, &lt;code&gt;t&lt;/code&gt; indicates the number of days after 2020-03-20 when the first review was made. All other columns, besides the response &lt;code&gt;rating&lt;/code&gt;, are word counts used as term weighting.&lt;/p&gt;
&lt;p&gt;Next I split the data into training and testing test with stratified sampling on &lt;code&gt;rating&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidymodels)

set.seed(2020)
reviews_split &amp;lt;- initial_split(model_df, strata = rating)
reviews_train &amp;lt;- training(reviews_split)
reviews_test &amp;lt;- testing(reviews_split)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I choose to fit a multinomial logisitic regression model run by the &lt;code&gt;glmnet&lt;/code&gt; package, with L1 regularization as in the lasso model. To detect medium ratings more accurately, the minority class, &lt;code&gt;step_upsample&lt;/code&gt; will bring the number of meidum and high ratings up to the same (&lt;code&gt;over_ratio = 1&lt;/code&gt; ) as that of low ratings. And &lt;code&gt;tune_gird()&lt;/code&gt; will calculate model performance metrics averaged over 25 bootstrap resamples for 100 choices of lambda.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multinom_spec &amp;lt;- multinom_reg(mixture = 1, penalty = tune()) %&amp;gt;% 
  set_engine(&amp;quot;glmnet&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;) 

library(themis)
rec &amp;lt;- recipe(rating ~ ., data = reviews_train) %&amp;gt;%
  update_role(user_name, new_role = &amp;quot;ID&amp;quot;) %&amp;gt;% 
  step_upsample(rating, over_ratio = 1) %&amp;gt;% 
  step_normalize(all_predictors())

lambda_grid &amp;lt;- grid_regular(penalty(), levels = 100)
  
reviews_folds &amp;lt;- bootstraps(reviews_train, strata = rating)

wf &amp;lt;- workflow() %&amp;gt;% 
  add_model(multinom_spec) %&amp;gt;% 
  add_recipe(rec)

doParallel::registerDoParallel()

multinom_search &amp;lt;- tune_grid(wf, 
                    resamples = reviews_folds,
                    grid = lambda_grid,
                    metrics = metric_set(roc_auc, accuracy, kap))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Available metrics are ROC AUC, accuracy and Kappa. In multiclass cases, accuracy and Kappa use the same definitions as their binary counterpart, with accuracy counting up the number of correctly predicted true values out of the total number of true values, and Kappa being a linear combination of two accuracy values, sensitivity and specificity. Multiclass ROC AUC, however, is implemented as the “hand_till” method which I won’t venture to interpret now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;multinom_search %&amp;gt;%
  collect_metrics() %&amp;gt;% 
  ggplot(aes(penalty, mean, color = .metric)) + 
  geom_line() + 
  geom_errorbar(aes(ymax = mean + std_err, ymin = mean - std_err)) + 
  scale_x_log10(labels = scales::label_number_auto()) + 
  facet_wrap(~ .metric, scales = &amp;quot;free_y&amp;quot;) + 
  labs(y = NULL, x = expression(lambda)) + 
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It’s clear from the plot that all 3 metrics benefit from appropriate regularization, and we can identify a local maximum in all penals at rougly the same lambda. Here I use the “one-standard error rule” that selects model with largest lambda that is within one standard error of the numerically optimal Kappa metric.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;best_lambda &amp;lt;- multinom_search %&amp;gt;% 
  select_by_one_std_err(metric = &amp;quot;kap&amp;quot;, desc(penalty))

best_lambda
#&amp;gt; # A tibble: 1 x 8
#&amp;gt;   penalty .metric .estimator  mean     n std_err .best .bound
#&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt; 1  0.0192 kap     multiclass 0.527    25 0.00685 0.533  0.526&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can finalize and fill the model with this lambda.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wf_final &amp;lt;- finalize_workflow(wf, best_lambda)

final_model &amp;lt;- last_fit(wf_final, split = reviews_split, 
                        metrics = metric_set(roc_auc, accuracy, kap))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For our model, the confusion matrix becomes 3 x 3.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_model %&amp;gt;% 
  collect_predictions() %&amp;gt;% 
  conf_mat(rating, estimate = .pred_class)
#&amp;gt;           Truth
#&amp;gt; Prediction low medium high
#&amp;gt;     low    104     17    7
#&amp;gt;     medium  31      8   12
#&amp;gt;     high    18      7  143&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks to downsmapling, the classifier performs quite consistently in predicting these 3 categories. Detection for low ratings may leave some room for improvement.&lt;/p&gt;
&lt;p&gt;Then we could examine these metrics on the model applied to testing set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_model %&amp;gt;% 
  collect_metrics()
#&amp;gt; # A tibble: 3 x 3
#&amp;gt;   .metric  .estimator .estimate
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
#&amp;gt; 1 accuracy multiclass     0.735
#&amp;gt; 2 kap      multiclass     0.556
#&amp;gt; 3 roc_auc  hand_till      0.746&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These number may not look so nice in terms of accuracy and ROC AUC, but there is a tradeoff happening. When I was still experimenting on different models I trained one that would miss all the medium ratings in the testing set, but did achieve relatively high predictive metrics. Then I decided to add the &lt;code&gt;step_upsampling&lt;/code&gt; step to enhance detection towards medium ratings. Although the game campany may not actually care about those mild people as much as they do about those go to extremes. For another, the best penality is judged by the Kappa statistic, which shows reasonable agreement.&lt;/p&gt;
&lt;p&gt;Varible importance plot could help us to identify useful features. For multiclass logit models, importance is defined as the sum of absolute value of coef of a variable. For example, in our baseline logit models:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\log(\frac{P(medium)}{P(low)}) &amp;amp;= \beta_20 + \beta_{21}x_1 + \cdots + \beta_{2p}x_p \\
\log(\frac{P(high)}{P(low)}) &amp;amp;= \beta_30 + \beta_{31}x_1 + \cdots + \beta_{3p}x_p
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The absolute value of variable importance for predictor &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; is &lt;span class=&#34;math inline&#34;&gt;\(|\hat{\beta}_{21}| + |\hat{\beta}_{31}|\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now I inspect predictors with top absolute variable importance to conclude this minimal project. If a predictor has high positive / negative importance, then it help us to judge whether a user is more intended to give higher ratings or otherwise, similar to sentiment analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;final_fit &amp;lt;- wf_final %&amp;gt;% fit(data = reviews_train)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(vip)

final_fit %&amp;gt;% 
  pull_workflow_fit() %&amp;gt;% 
  vi(lambda = best_lambda$penalty) %&amp;gt;%
  group_by(Sign) %&amp;gt;% 
  top_n(30, wt = abs(Importance)) %&amp;gt;% 
  ungroup() %&amp;gt;%
  mutate(Sign = if_else(Sign == &amp;quot;NEG&amp;quot;, &amp;quot;lower ratings&amp;quot;, &amp;quot;higher ratings&amp;quot;)) %&amp;gt;% 
  ggplot(aes(y = reorder_within(Variable, abs(Importance), Sign),
             x = Importance,
             fill = Sign)) + 
  geom_col(show.legend = FALSE, alpha = 0.5) +
  scale_y_reordered() + 
  facet_wrap(~ Sign, scales = &amp;quot;free&amp;quot;) + 
  labs(y = NULL) + 
  theme(axis.text = element_text(size = 20),
        panel.grid.major.y = element_blank(),
        strip.text = element_text(size = 24, face = &amp;quot;bold&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-07-analyzing-animal-crossing-reviews/index_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Text Classfication with Penalized Logistic Regression</title>
      <link>https://qiushi.rbind.io/post/text-classification-logistic/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      <guid>https://qiushi.rbind.io/post/text-classification-logistic/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#comparing-word-frequency&#34;&gt;Comparing word frequency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modeling&#34;&gt;Modeling&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data-preprocessing&#34;&gt;Data preprocessing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#train-a-penalized-logistic-regression-model&#34;&gt;Train a penalized logistic regression model&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tuning-lambda&#34;&gt;Tuning lambda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;In this post I aim to train a text classification model with penalized logistic regression using the &lt;a href=&#34;https://www.tidymodels.org/&#34;&gt;&lt;code&gt;tidymodels&lt;/code&gt;&lt;/a&gt; framework. Data are from 5 books and downloaded via the &lt;a href=&#34;https://docs.ropensci.org/gutenbergr/&#34;&gt;&lt;code&gt;gutenbergr&lt;/code&gt;&lt;/a&gt; package, written by either Emily Brontë or Charlotte Brontë. And the goal is to predict the author of a line, in other words the probability of line being written by one sister instead of another.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(tidytext)
library(gutenbergr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;books &amp;lt;- gutenberg_works() %&amp;gt;% 
  filter(str_detect(author, &amp;quot;Brontë, Emily|Brontë, Charlotte&amp;quot;)) %&amp;gt;% 
  gutenberg_download(meta_fields = c(&amp;quot;title&amp;quot;, &amp;quot;author&amp;quot;)) %&amp;gt;% 
  transmute(title,
            author = if_else(author == &amp;quot;Brontë, Emily&amp;quot;, 
                             &amp;quot;Emily Brontë&amp;quot;, 
                             &amp;quot;Charlotte Brontë&amp;quot;) %&amp;gt;% factor(),
            line_index = row_number(),
            text)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;books&lt;/code&gt; is at line level&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;books
#&amp;gt; # A tibble: 88,989 x 4
#&amp;gt;    title        author     line_index text                                      
#&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;fct&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                     
#&amp;gt;  1 Wuthering H~ Emily Bro~          1 &amp;quot;WUTHERING HEIGHTS&amp;quot;                       
#&amp;gt;  2 Wuthering H~ Emily Bro~          2 &amp;quot;&amp;quot;                                        
#&amp;gt;  3 Wuthering H~ Emily Bro~          3 &amp;quot;&amp;quot;                                        
#&amp;gt;  4 Wuthering H~ Emily Bro~          4 &amp;quot;CHAPTER I&amp;quot;                               
#&amp;gt;  5 Wuthering H~ Emily Bro~          5 &amp;quot;&amp;quot;                                        
#&amp;gt;  6 Wuthering H~ Emily Bro~          6 &amp;quot;&amp;quot;                                        
#&amp;gt;  7 Wuthering H~ Emily Bro~          7 &amp;quot;1801.--I have just returned from a visit~
#&amp;gt;  8 Wuthering H~ Emily Bro~          8 &amp;quot;neighbour that I shall be troubled with.~
#&amp;gt;  9 Wuthering H~ Emily Bro~          9 &amp;quot;country!  In all England, I do not belie~
#&amp;gt; 10 Wuthering H~ Emily Bro~         10 &amp;quot;situation so completely removed from the~
#&amp;gt; # ... with 88,979 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To obtain tidy text structure illustrated in &lt;a href=&#34;https://www.tidytextmining.com/&#34;&gt;Text Mining with R&lt;/a&gt;, I use &lt;code&gt;unnest_tokens()&lt;/code&gt; to perform tokenization and remove all the stop words. I also removed characters like &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;&#39;s&lt;/code&gt;, &lt;code&gt;&#39;&lt;/code&gt; and whitespaces to return valid column names after widening. But it turns out this served as some sort of stemming too! (heathcliff’s becomes heathcliff). Then low frequency words (whose frequency is less than 0.05% of an author’s total word counts) are removed. The cutoff may be a little too high if you plot that histogram, but I really need this to save computation efforts on my laptop 😅.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_books &amp;lt;- books %&amp;gt;% 
  unnest_tokens(word, text) %&amp;gt;%
  anti_join(stop_words) %&amp;gt;% 
  filter(!str_detect(word, &amp;quot;^\\d+$&amp;quot;)) %&amp;gt;% 
  mutate(word = str_remove_all(word, &amp;quot;_|&amp;#39;s|&amp;#39;|\\s&amp;quot;))
  
total_words &amp;lt;- clean_books %&amp;gt;%
  count(author, name = &amp;quot;total&amp;quot;)

tidy_books &amp;lt;- clean_books %&amp;gt;%
  left_join(total_words) %&amp;gt;% 
  group_by(author, total, word) %&amp;gt;%
  filter((n() / total) &amp;gt; 0.0005) %&amp;gt;% 
  ungroup() &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;comparing-word-frequency&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comparing word frequency&lt;/h1&gt;
&lt;p&gt;Before building an actual predictive model, let’s do some EDA to see different tendency to use a particular word! This will also shed light on what we would expect from the text classification. Now, we will compare word frequency (proportion) between the two sisters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_books %&amp;gt;% 
  group_by(author, total) %&amp;gt;%
  count(word) %&amp;gt;% 
  mutate(prop = n / total) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  select(-total, -n) %&amp;gt;%
  pivot_wider(names_from  = author, values_from = prop,
              values_fill = list(prop = 0)) %&amp;gt;% 
  ggplot(aes(x = `Charlotte Brontë`, y = `Emily Brontë`, 
             color = abs(`Emily Brontë` -  `Charlotte Brontë`))) + 
  geom_jitter(width = 0.001, height = 0.001, alpha = 0.2, size = 2.5) + 
  geom_abline(color = &amp;quot;gray40&amp;quot;, lty = 2) + 
  geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5, size = 7.5) + 
  scale_color_gradient(low = &amp;quot;darkslategray4&amp;quot;, high = &amp;quot;gray75&amp;quot;) +
  scale_x_continuous(labels = scales::label_percent()) + 
  scale_y_continuous(labels = scales::label_percent()) +  
  theme(legend.position = &amp;quot;none&amp;quot;) + 
  coord_cartesian(xlim = c(0, NA)) + 
  labs(title = &amp;quot;Word frequency between two sisters&amp;quot;) + 
  theme(text = element_text(size = 18),
        plot.title.position = &amp;quot;plot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-02-text-classification-with-logistic-rm/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1440&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Words lie near the line such as “home”, “head” and “half” indicate similar tendency to use that word, while those that are far from the line are words that are found more in one set of texts than another, for example “headthcliff”, “linton”, “catherine”, etc.&lt;/p&gt;
&lt;p&gt;What does this plot tell us? Judged only by word frequency, it looks that there are a number of words that are quite characteristic of Emily Brontë (upper left corner). Charlotte, on the other hand, has few representative words (bottom right corner). We will investigate this further in the model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modeling&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modeling&lt;/h1&gt;
&lt;div id=&#34;data-preprocessing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data preprocessing&lt;/h2&gt;
&lt;p&gt;There are 423 and features (words) and 47119 observations in total. Approximately 18% of the response are 1 (Emily Brontë).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy_books %&amp;gt;% 
  count(author) %&amp;gt;% 
  mutate(prop = n / sum(n))
#&amp;gt; # A tibble: 2 x 3
#&amp;gt;   author               n  prop
#&amp;gt;   &amp;lt;fct&amp;gt;            &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Charlotte Brontë 64858 0.817
#&amp;gt; 2 Emily Brontë     14489 0.183&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it’s time to widen our data to reach an appropriate model structure, this similar to a document-term matrix, with rows being a line and column word count.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidymodels)
set.seed(2020)
doParallel::registerDoParallel()

model_df &amp;lt;- tidy_books %&amp;gt;% 
  count(line_index, word) %&amp;gt;% 
  pivot_wider(names_from = word, values_from = n,
              values_fill = list(n = 0)) %&amp;gt;% 
  left_join(books, by = c(&amp;quot;line_index&amp;quot; = &amp;quot;line_index&amp;quot;)) %&amp;gt;% 
  select(-title, -text)

model_df
#&amp;gt; # A tibble: 47,119 x 425
#&amp;gt;    line_index heights wuthering chapter returned visit heathcliff heaven black
#&amp;gt;         &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt;  1          1       1         1       0        0     0          0      0     0
#&amp;gt;  2          4       0         0       1        0     0          0      0     0
#&amp;gt;  3          7       0         0       0        1     1          0      0     0
#&amp;gt;  4         11       0         0       0        0     0          1      1     0
#&amp;gt;  5         13       0         0       0        0     0          0      0     1
#&amp;gt;  6         15       0         0       0        0     0          0      0     0
#&amp;gt;  7         18       0         0       0        0     0          1      0     0
#&amp;gt;  8         20       0         0       0        0     0          0      0     0
#&amp;gt;  9         22       0         0       0        0     0          0      0     0
#&amp;gt; 10         23       0         0       0        0     0          0      0     0
#&amp;gt; # ... with 47,109 more rows, and 416 more variables: eyes &amp;lt;int&amp;gt;, heart &amp;lt;int&amp;gt;,
#&amp;gt; #   fingers &amp;lt;int&amp;gt;, answer &amp;lt;int&amp;gt;, sir &amp;lt;int&amp;gt;, hope &amp;lt;int&amp;gt;, grange &amp;lt;int&amp;gt;,
#&amp;gt; #   heard &amp;lt;int&amp;gt;, thrushcross &amp;lt;int&amp;gt;, interrupted &amp;lt;int&amp;gt;, walk &amp;lt;int&amp;gt;,
#&amp;gt; #   closed &amp;lt;int&amp;gt;, uttered &amp;lt;int&amp;gt;, gate &amp;lt;int&amp;gt;, words &amp;lt;int&amp;gt;, horse &amp;lt;int&amp;gt;,
#&amp;gt; #   hand &amp;lt;int&amp;gt;, entered &amp;lt;int&amp;gt;, joseph &amp;lt;int&amp;gt;, bring &amp;lt;int&amp;gt;, suppose &amp;lt;int&amp;gt;,
#&amp;gt; #   nay &amp;lt;int&amp;gt;, dinner &amp;lt;int&amp;gt;, guess &amp;lt;int&amp;gt;, times &amp;lt;int&amp;gt;, wind &amp;lt;int&amp;gt;, house &amp;lt;int&amp;gt;,
#&amp;gt; #   strong &amp;lt;int&amp;gt;, set &amp;lt;int&amp;gt;, wall &amp;lt;int&amp;gt;, door &amp;lt;int&amp;gt;, earnshaw &amp;lt;int&amp;gt;,
#&amp;gt; #   hareton &amp;lt;int&amp;gt;, short &amp;lt;int&amp;gt;, appeared &amp;lt;int&amp;gt;, desire &amp;lt;int&amp;gt;, entrance &amp;lt;int&amp;gt;,
#&amp;gt; #   brought &amp;lt;int&amp;gt;, family &amp;lt;int&amp;gt;, sitting &amp;lt;int&amp;gt;, call &amp;lt;int&amp;gt;, kitchen &amp;lt;int&amp;gt;,
#&amp;gt; #   parlour &amp;lt;int&amp;gt;, deep &amp;lt;int&amp;gt;, observed &amp;lt;int&amp;gt;, light &amp;lt;int&amp;gt;, eye &amp;lt;int&amp;gt;,
#&amp;gt; #   lay &amp;lt;int&amp;gt;, floor &amp;lt;int&amp;gt;, white &amp;lt;int&amp;gt;, countenance &amp;lt;int&amp;gt;, arm &amp;lt;int&amp;gt;,
#&amp;gt; #   chair &amp;lt;int&amp;gt;, seated &amp;lt;int&amp;gt;, round &amp;lt;int&amp;gt;, table &amp;lt;int&amp;gt;, time &amp;lt;int&amp;gt;,
#&amp;gt; #   living &amp;lt;int&amp;gt;, dark &amp;lt;int&amp;gt;, people &amp;lt;int&amp;gt;, hate &amp;lt;int&amp;gt;, love &amp;lt;int&amp;gt;,
#&amp;gt; #   loved &amp;lt;int&amp;gt;, fast &amp;lt;int&amp;gt;, dear &amp;lt;int&amp;gt;, mother &amp;lt;int&amp;gt;, home &amp;lt;int&amp;gt;,
#&amp;gt; #   summer &amp;lt;int&amp;gt;, fine &amp;lt;int&amp;gt;, company &amp;lt;int&amp;gt;, creature &amp;lt;int&amp;gt;, notice &amp;lt;int&amp;gt;,
#&amp;gt; #   told &amp;lt;int&amp;gt;, head &amp;lt;int&amp;gt;, looked &amp;lt;int&amp;gt;, return &amp;lt;int&amp;gt;, poor &amp;lt;int&amp;gt;, till &amp;lt;int&amp;gt;,
#&amp;gt; #   doubt &amp;lt;int&amp;gt;, seat &amp;lt;int&amp;gt;, silence &amp;lt;int&amp;gt;, left &amp;lt;int&amp;gt;, dog &amp;lt;int&amp;gt;,
#&amp;gt; #   master &amp;lt;int&amp;gt;, sat &amp;lt;int&amp;gt;, scarcely &amp;lt;int&amp;gt;, half &amp;lt;int&amp;gt;, hearth &amp;lt;int&amp;gt;,
#&amp;gt; #   arms &amp;lt;int&amp;gt;, fire &amp;lt;int&amp;gt;, purpose &amp;lt;int&amp;gt;, tongue &amp;lt;int&amp;gt;, remained &amp;lt;int&amp;gt;,
#&amp;gt; #   devil &amp;lt;int&amp;gt;, manner &amp;lt;int&amp;gt;, matter &amp;lt;int&amp;gt;, ill &amp;lt;int&amp;gt;, muttered &amp;lt;int&amp;gt;,
#&amp;gt; #   worse &amp;lt;int&amp;gt;, leave &amp;lt;int&amp;gt;, ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;train-a-penalized-logistic-regression-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Train a penalized logistic regression model&lt;/h2&gt;
&lt;p&gt;Split the data into training set and testing set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;book_split &amp;lt;- initial_split(model_df)
book_train &amp;lt;- training(book_split)
book_test &amp;lt;- testing(book_split)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specify a L1 penalized logistic model, center and scale all predictors and combine them in to a &lt;code&gt;workflow&lt;/code&gt; object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_spec &amp;lt;- logistic_reg(penalty = 0.05, mixture = 1) %&amp;gt;%
  set_engine(&amp;quot;glmnet&amp;quot;)

book_rec &amp;lt;- recipe(author ~ ., data = book_train) %&amp;gt;% 
  update_role(line_index, new_role = &amp;quot;ID&amp;quot;) %&amp;gt;% 
  step_zv(all_predictors()) %&amp;gt;% 
  step_normalize(all_predictors())

book_wf &amp;lt;- workflow() %&amp;gt;% 
  add_model(logistic_spec) %&amp;gt;% 
  add_recipe(book_rec)

initial_fit &amp;lt;- book_wf %&amp;gt;% 
  fit(data = book_train)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;initial_fit&lt;/code&gt; is a simple fitted regression model without any hyperparameters. By default &lt;code&gt;glmnet&lt;/code&gt; calls for 100 values of lambda even if I specify &lt;span class=&#34;math inline&#34;&gt;\(\lambda = 0.05\)&lt;/span&gt;. So the extracted result aren’t that helpful.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;initial_fit %&amp;gt;%
  pull_workflow_fit() %&amp;gt;% 
  tidy()
#&amp;gt; # A tibble: 26,019 x 5
#&amp;gt;    term         step estimate lambda dev.ratio
#&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
#&amp;gt;  1 (Intercept)     1 -1.64    0.0838  5.24e-14
#&amp;gt;  2 (Intercept)     2 -1.64    0.0764  8.68e- 3
#&amp;gt;  3 heathcliff      2  0.0469  0.0764  8.68e- 3
#&amp;gt;  4 linton          2  0.00120 0.0764  8.68e- 3
#&amp;gt;  5 (Intercept)     3 -1.64    0.0696  2.51e- 2
#&amp;gt;  6 heathcliff      3  0.0801  0.0696  2.51e- 2
#&amp;gt;  7 catherine       3  0.0269  0.0696  2.51e- 2
#&amp;gt;  8 linton          3  0.0413  0.0696  2.51e- 2
#&amp;gt;  9 (Intercept)     4 -1.64    0.0634  3.80e- 2
#&amp;gt; 10 heathcliff      4  0.107   0.0634  3.80e- 2
#&amp;gt; # ... with 26,009 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can make predictions with &lt;code&gt;initial_fit&lt;/code&gt; anyway, and examine metrics like overall accuracy.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;initial_predict &amp;lt;- predict(initial_fit, book_test) %&amp;gt;% 
    bind_cols(predict(initial_fit, book_test, type = &amp;quot;prob&amp;quot;)) %&amp;gt;%
    bind_cols(book_test %&amp;gt;% select(author, line_index))

initial_predict
#&amp;gt; # A tibble: 11,779 x 5
#&amp;gt;    .pred_class     `.pred_Charlotte Bro~ `.pred_Emily Bron~ author    line_index
#&amp;gt;    &amp;lt;fct&amp;gt;                           &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;          &amp;lt;int&amp;gt;
#&amp;gt;  1 Charlotte Bron~                 0.844              0.156 Emily Br~          1
#&amp;gt;  2 Charlotte Bron~                 0.844              0.156 Emily Br~         13
#&amp;gt;  3 Charlotte Bron~                 0.844              0.156 Emily Br~         30
#&amp;gt;  4 Charlotte Bron~                 0.844              0.156 Emily Br~         31
#&amp;gt;  5 Charlotte Bron~                 0.844              0.156 Emily Br~         36
#&amp;gt;  6 Charlotte Bron~                 0.844              0.156 Emily Br~         56
#&amp;gt;  7 Charlotte Bron~                 0.844              0.156 Emily Br~         68
#&amp;gt;  8 Charlotte Bron~                 0.844              0.156 Emily Br~         75
#&amp;gt;  9 Charlotte Bron~                 0.844              0.156 Emily Br~         89
#&amp;gt; 10 Charlotte Bron~                 0.844              0.156 Emily Br~         96
#&amp;gt; # ... with 11,769 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How good is our initial model?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;initial_predict %&amp;gt;% 
  accuracy(truth = author, estimate = .pred_class)
#&amp;gt; # A tibble: 1 x 3
#&amp;gt;   .metric  .estimator .estimate
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
#&amp;gt; 1 accuracy binary         0.844&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nearly 84% of all predictions are right. This isn’t a very statisfactory result since “Charlotte Brontë” accounts for 81% of &lt;code&gt;author&lt;/code&gt;, making our model only slightly better than a classifier that would assngin all &lt;code&gt;author&lt;/code&gt; with “Charlotte Brontë” anyway.&lt;/p&gt;
&lt;div id=&#34;tuning-lambda&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tuning lambda&lt;/h3&gt;
&lt;p&gt;We can figure out an appropriate penalty using resampling and tune the model.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_wf_tune &amp;lt;- book_wf %&amp;gt;%
  update_model(logistic_spec %&amp;gt;% set_args(penalty = tune()))

lambda_grid &amp;lt;- grid_regular(penalty(), levels = 100)
book_folds &amp;lt;- vfold_cv(book_train, v = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I build a set of 10 cross validations resamples, and set &lt;code&gt;levels = 100&lt;/code&gt; to try 100 choices of lambda ranging from 0 to 1.&lt;/p&gt;
&lt;p&gt;Then I tune the grid:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_results &amp;lt;- logistic_wf_tune %&amp;gt;%    
  tune_grid(
    resamples = book_folds,
    grid = lambda_grid)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is an &lt;code&gt;autoplot()&lt;/code&gt; method for the tuned results, but I instead plot two metrics versus lambda respectivcely by myself.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_results %&amp;gt;% 
  collect_metrics() %&amp;gt;% 
  mutate(lower_bound = mean - std_err,
         upper_bound = mean + std_err) %&amp;gt;%
  ggplot(aes(penalty, mean)) + 
  geom_line(aes(color = .metric), size = 1.5, show.legend = FALSE) + 
  geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound)) + 
  facet_wrap(~ .metric, nrow = 2, scales = &amp;quot;free&amp;quot;) + 
  labs(y = NULL,
       x = expression(lambda),
       title = &amp;quot;Performance metric of logistic regession versus differenct choices of L1 regularization&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-02-text-classification-with-logistic-rm/index_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ok, the two metrics both display a monotone decrease as lambda increases, but does not exhibit much change once lambda is greater than 0.1, which is essentailly random guess according to the author’s respective proportion of appearance in the data. This plot shows that the model is generally better at small penalty, suggesting that the majority of the predictors are fairly important to the model. We may lean towards larger penalty with slightly worse performance, bacause they lead to simpler models. It follows that we may want to choose lambda in top rows in the following data frame&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;top_models &amp;lt;- logistic_results %&amp;gt;% 
    show_best(&amp;quot;roc_auc&amp;quot;, n = 100) %&amp;gt;%
    arrange(desc(penalty)) %&amp;gt;% 
    filter(mean &amp;gt; 0.9)

top_models
#&amp;gt; # A tibble: 76 x 6
#&amp;gt;     penalty .metric .estimator  mean     n std_err
#&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt;  1 0.00376  roc_auc binary     0.906    10 0.00215
#&amp;gt;  2 0.00298  roc_auc binary     0.908    10 0.00219
#&amp;gt;  3 0.00236  roc_auc binary     0.908    10 0.00222
#&amp;gt;  4 0.00187  roc_auc binary     0.908    10 0.00227
#&amp;gt;  5 0.00148  roc_auc binary     0.909    10 0.00209
#&amp;gt;  6 0.00118  roc_auc binary     0.910    10 0.00207
#&amp;gt;  7 0.000933 roc_auc binary     0.910    10 0.00202
#&amp;gt;  8 0.000739 roc_auc binary     0.910    10 0.00205
#&amp;gt;  9 0.000586 roc_auc binary     0.910    10 0.00209
#&amp;gt; 10 0.000464 roc_auc binary     0.910    10 0.00210
#&amp;gt; # ... with 66 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;select_best()&lt;/code&gt; with return the 9th row with &lt;span class=&#34;math inline&#34;&gt;\(\lambda \approx 0.000586\)&lt;/span&gt; for its highest performance on &lt;code&gt;roc_auc&lt;/code&gt;. But I’ll stick to the parsimonious principle and pick &lt;span class=&#34;math inline&#34;&gt;\(\lambda \approx 0.00376\)&lt;/span&gt; at the cost of a fall in &lt;code&gt;roc_auc&lt;/code&gt; by 0.005 and in &lt;code&gt;accuracy&lt;/code&gt; by 0.001.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_results %&amp;gt;% 
  select_best(metric = &amp;quot;roc_auc&amp;quot;)
#&amp;gt; # A tibble: 1 x 1
#&amp;gt;    penalty
#&amp;gt;      &amp;lt;dbl&amp;gt;
#&amp;gt; 1 0.000586

book_wf_final &amp;lt;- finalize_workflow(logistic_wf_tune,
                                  parameters = top_models %&amp;gt;% slice(1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the model specification in the workflow is filled with the picked lambda:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;book_wf_final %&amp;gt;% pull_workflow_spec()
#&amp;gt; Logistic Regression Model Specification (classification)
#&amp;gt; 
#&amp;gt; Main Arguments:
#&amp;gt;   penalty = 0.00376493580679246
#&amp;gt;   mixture = 1
#&amp;gt; 
#&amp;gt; Computational engine: glmnet&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next thing is to fit the best model with the training set, and evaluate against the test set.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_final &amp;lt;- last_fit(book_wf_final, split = book_split)

logistic_final %&amp;gt;% 
  collect_metrics()
#&amp;gt; # A tibble: 2 x 3
#&amp;gt;   .metric  .estimator .estimate
#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;
#&amp;gt; 1 accuracy binary         0.938
#&amp;gt; 2 roc_auc  binary         0.904&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_final %&amp;gt;% 
  collect_predictions() %&amp;gt;%
  roc_curve(truth = author, `.pred_Emily Brontë`) %&amp;gt;% 
  autoplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;roc_curve.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The accuracy of our logisitc model rises by a rough 9% to 93.8%, with &lt;code&gt;roc_auc&lt;/code&gt; being nearly 0.904. This is pretty good!&lt;/p&gt;
&lt;p&gt;There is also the confusion matrix to check. The model does well in identifying Charlotte Brontë (low false positive rate, high sensitivity), yet suffers relatively high false negative rate (mistakenly identify 39% of Emily Brontë as Charlotte Brontë, aka low specificity). In part, this is due to class imbalance (four out of five books were written by Charlotte).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logistic_final %&amp;gt;%
  collect_predictions() %&amp;gt;%
  conf_mat(truth = author, estimate = .pred_class) 
#&amp;gt;                   Truth
#&amp;gt; Prediction         Charlotte Brontë Emily Brontë
#&amp;gt;   Charlotte Brontë             9921          726
#&amp;gt;   Emily Brontë                    1         1131&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To examine the effect of predictors, I agian use &lt;code&gt;fit&lt;/code&gt; and &lt;code&gt;pull_workflow&lt;/code&gt; to extract model fit. Variable importance plots implemented in the &lt;a href=&#34;https://koalaverse.github.io/vip/index.html&#34;&gt;vip&lt;/a&gt; package provides an intuitive way to visualize importance of predictors in this scenario, using the absolute value of the t-statistic as a measure of VI.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(vip)

logistic_vi &amp;lt;- book_wf_final %&amp;gt;% 
  fit(book_train) %&amp;gt;% 
  pull_workflow_fit() %&amp;gt;%
  vi(lambda = top_models[1, ]$penalty) %&amp;gt;% 
  group_by(Sign) %&amp;gt;% 
  top_n(30, wt = abs(Importance)) %&amp;gt;%
  ungroup() %&amp;gt;% 
  mutate(Sign = if_else(Sign == &amp;quot;POS&amp;quot;, 
                        &amp;quot;More Emily Brontë&amp;quot;, 
                        &amp;quot;More Charlotte Brontë&amp;quot;))

logistic_vi %&amp;gt;% 
  ggplot(aes(y = reorder_within(Variable, abs(Importance), Sign),
             x = Importance)) + 
  geom_col(aes(fill = Sign), 
           show.legend = FALSE, alpha = 0.6) +
  scale_y_reordered() + 
  facet_wrap(~ Sign, nrow = 1, scales = &amp;quot;free&amp;quot;) + 
  labs(title = &amp;quot;How word usage classifies Brontë sisters&amp;quot;,
       x = NULL,
       y = NULL) + 
  theme(axis.text = element_text(size = 18),
        plot.title = element_text(size = 24),
        plot.title.position = &amp;quot;plot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:unnamed-chunk-25&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://qiushi.rbind.io/post/2020-05-02-text-classification-with-logistic-rm/index_files/figure-html/unnamed-chunk-25-1.png&#34; alt=&#34;Variable importance plot for penalized logistic regression&#34; width=&#34;1056&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Variable importance plot for penalized logistic regression
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Is it cheating to use names of a character to classify authors? Perhaps I should consider include more books and remove names for text classification next time.&lt;/p&gt;
&lt;p&gt;Note that variale importance in the left panel is generally smaller than the right, this corresponds to what we find in the &lt;a href=&#34;#comparing-word-frequency&#34;&gt;word frequency&lt;/a&gt; plot that Emily Brontë has more and stronger characteristic words.&lt;/p&gt;
&lt;p&gt;In conclusion, the model with the best lambda seems quite powerful in distinguishing these two authors. I look forward to build a multinomial classification model in &lt;code&gt;tidymodels&lt;/code&gt; to include Anne Brontë some other time!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
